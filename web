#!/usr/bin/env python

import os
import shutil
import sys

import git
import urllib


SITE_URL = 'https://eyqs.ca'
REPO_REMOTE = 'origin'
BUILD_BRANCH = 'gh-pages'

REPO_ROOT = '/home/eyqs/Downloads/Dropbox/Projects/web/'
POSTS_FOLDER = '_posts'
LAYOUTS_FOLDER = '_layouts'
INCLUDES_FOLDER = '_includes'
BUILD_FOLDER = '_site'
BLOGS_FOLDER = 'blogs'
BUILD_PATH = os.path.join(REPO_ROOT, BUILD_FOLDER)

PREAMBLE_SEPARATOR = '---\n'
IGNORED_FILES = ['.git', '.gitmodules',
        'LICENSE.md', 'README.md', 'requirements.txt', 'web',
        POSTS_FOLDER, LAYOUTS_FOLDER, INCLUDES_FOLDER, BUILD_FOLDER]
UNARCHIVED_FILES = ['index.html', '404.html']
CONTENT_EXTENSIONS = ['.html', '.md']



def get_name(name):
    return os.path.splitext(name)[0]


def get_extension(name):
    return os.path.splitext(name)[1]


def is_content(name):
    return get_extension(name) in CONTENT_EXTENSIONS


def is_include(line):
    strip = line.strip()
    return strip.startswith('{% include ') and strip.endswith('.html %}')


def get_include(line):
    return line.strip().split()[2]


def has_tag(line):
    return '{{' in line and '}}' in line


def get_tag(line):
    start = line.index('{{')
    end = line.index('}}')
    return line[start+2:end].strip()


def replace_tag(line, value):
    start = line.index('{{')
    end = line.index('}}')
    return line.replace(line[start:end+2], value)


def generate(src_path, dest_path):

    content = []
    preamble = None
    parameters = {}

    with open(src_path, 'r') as infile:
        for line in infile:
            if preamble and line == PREAMBLE_SEPARATOR:
                preamble = False
            if preamble:
                key, value = line.split(':', 1)
                if key == 'content':
                    raise ValueError(
                            f'must not use "content" as key in {src_path}')
                parameters[key] = value.strip()
            if preamble is None and line == PREAMBLE_SEPARATOR:
                preamble = True
            if not preamble:
                content.append(line)

    if 'layout' not in parameters:
        raise ValueError(f'must have "layout" as key in {src_path}')

    with open(dest_path, 'w') as outfile:
        layout_path = os.path.join(
                REPO_ROOT, LAYOUTS_FOLDER, f'{parameters["layout"]}.html')

        with open(layout_path, 'r') as layoutfile:
            for line in layoutfile:
                indent = line.split('{', 1)[0]

                if is_include(line):
                    include_path = os.path.join(
                            REPO_ROOT, INCLUDES_FOLDER, get_include(line))
                    with open(include_path, 'r') as includefile:
                        for includeline in includefile:
                            outfile.write(indent + includeline)

                elif has_tag(line):
                    key = get_tag(line)
                    if key == 'content':
                        for contentline in content:
                            outfile.write(indent + contentline)
                    elif key not in parameters:
                        raise ValueError(
                                f'key "{key}" was not found in {src_path}')
                    else:
                        outfile.write(replace_tag(line, parameters[key]))

                else:
                    outfile.write(line)



def archive():

    print('Archiving index')
    urllib.request.urlopen(f'http://web.archive.org/save/{SITE_URL}')

    with os.scandir(REPO_ROOT) as it:
        for entry in it:
            if entry.name in UNARCHIVED_FILES:
                continue
            if get_extension(entry.name) == '.html':
                page = get_name(entry.name)
                print(f'Archiving page: {page}')
                urllib.request.urlopen('http://web.archive.org/'
                        + f'save/{SITE_URL}/{page}/')

    with os.scandir(os.path.join(REPO_ROOT, POSTS_FOLDER)) as it:
        for entry in it:
            post = get_name(entry.name)
            print(f'Archiving post: {post}')
            urllib.request.urlopen('http://web.archive.org/'
                    + f'save/{SITE_URL}/{BLOGS_FOLDER}/{post}/')


def push():

    repo = git.Repo(REPO_ROOT)
    repo.git.subtree('push', REPO_REMOTE, BUILD_BRANCH, prefix=BUILD_FOLDER)


def build():

    if os.path.exists(BUILD_PATH):
        print(f'Removing build directory: {BUILD_FOLDER}/')
        shutil.rmtree(BUILD_PATH)

    os.mkdir(BUILD_PATH)
    with os.scandir(REPO_ROOT) as it:
        for entry in it:
            if entry.name not in IGNORED_FILES:
                if is_content(entry.name):
                    dest_path = os.path.join(
                            BUILD_PATH, f'{get_name(entry.name)}.html')
                    print(f'Generating page: {entry.name}')
                    generate(entry.path, dest_path)
                else:
                    dest_path = os.path.join(BUILD_PATH, entry.name)
                    if entry.is_dir():
                        print(f'Copying folder: {entry.name}/')
                        shutil.copytree(entry.path, dest_path)
                    else:
                        print(f'Copying file: {entry.name}')
                        shutil.copy(entry.path, dest_path)

    os.mkdir(os.path.join(BUILD_PATH, BLOGS_FOLDER))
    with os.scandir(os.path.join(REPO_ROOT, POSTS_FOLDER)) as it:
        for entry in it:
            print(f'Generating post: {entry.name}')
            dest_path = os.path.join(
                    BUILD_PATH, BLOGS_FOLDER, f'{get_name(entry.name)}.html')
            generate(entry.path, dest_path)



if __name__ == '__main__':

    if len(sys.argv) != 2:
        print('Usage: ./web [archive|build|push]')
        exit(1)

    os.chdir(REPO_ROOT)
    if sys.argv[1] == 'archive':
        archive()
    elif sys.argv[1] == 'build':
        build()
    elif sys.argv[1] == 'push':
        push()
    else:
        print('Usage: ./web [archive|build|push]')
        exit(1)
