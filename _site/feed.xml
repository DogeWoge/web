<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eugene Y. Q. Shen</title>
    <description>The home page of Eugene Y. Q. Shen, a wannabe programmer, awful pianist, and first-year Engineering student. Welcome to my site on the web!</description>
    <link>https://eyqs.ca/</link>
    <atom:link href="https://eyqs.ca/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 07 May 2019 15:31:35 -0700</pubDate>
    <lastBuildDate>Tue, 07 May 2019 15:31:35 -0700</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>The Wandering Earth Movie Review and 流浪地球 Novella Review</title>
        <description>&lt;p&gt;I watched The Wandering Earth and wanted to review it, but I figured it’d be better if I had read its source novella too, but it’s in Chinese, so I haven’t even finished reading it, because I didn’t do a single thing this reading break, so I’ll write this post later. Actually, everything I do is a single thing unless I get a girlfriend :0&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Feb 2019 00:00:00 -0800</pubDate>
        <link>https://eyqs.ca/blogs/1902-wand-earth/</link>
        <guid isPermaLink="true">https://eyqs.ca/blogs/1902-wand-earth/</guid>
        
        
      </item>
    
      <item>
        <title>2019 New Year's Resolutions: 1) Don't Be Sick, 2) Go to Sleep</title>
        <description>&lt;p&gt;I know when I’ll be sick, two days before any physical symptoms appear. That’s why I cancelled my free trip, all-expenses-paid hotel, flight included (without cost, without charge), and complimentary unlimited (free) food from the &lt;a href=&quot;https://www.communitech.ca/how-we-help/talent/code-to-win/&quot;&gt;Communitech Code to Win&lt;/a&gt; competition two years in a row. Well, last year, it was because I contracted meningitis and ended up in the emergency room for a midnight lumbar puncture, only to discover it was viral meningitis, which requires an intense battery of pharmaceutical remedies including dihydrogen monoxide, hydroxic acid, and extreme sleep. But this year, just two weeks ago, I withdrew from the competition the day before my flight despite having no physical symptoms whatsoever—no cough, no fever, no sore throat, no extreme death, no runny nose, nothing.&lt;/p&gt;

&lt;p&gt;Happy new year. You’ll get lost in this post. I’m not sure what it’s really about, so I hereby declare: this is a post about my new year’s resolutions. Keep that in mind.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;So why’d I cancel my (free) trip? Was it because Kitchener–Waterloo had a wind chill of −40 °C (also known as −40 °F, in Liberia) and I didn’t want to freeze? (Maybe.) Was it because I really really didn’t want to be in the same province as my ex? (No, she didn’t want to be in the same province as me.) Was it because the trip was free and 100% subsidized (without charge), and I already have a summer internship, so I’m actually saving Communitech money because if I went I’d just eat lots of unlimited free food while ignoring all their precious startup sponsors? (Sure.)&lt;/p&gt;

&lt;p&gt;Well, not really. I cancelled because I knew that I’d be sick. Two days before the flight, I came home from class at 3:00 PM, ate lunch, and promptly spent the next twelve hours mindlessly scrolling through YouTube and Reddit. The day before, I cancelled my flight in the morning, then came home from ACM at 9:00 PM and spent the next six hours mindlessly scrolling through ~the World Wide Web~. Then I spent the next three days sick in bed with the flu.&lt;/p&gt;

&lt;p&gt;Anyway, &lt;a href=&quot;/blogs/1805-late-rides/&quot;&gt;this is another post&lt;/a&gt; about time management. I mean, that link is the first post about time management, and this sentence you’re reading is part of another post about time management. Alternatively, this sentence you’re reading is part of the second post about time management, and that link is another post about time management. Keep that in mind, but forget the past two sentences you just read, I don’t know why I even wrote that, I wish I had the time to edit these posts but I don’t because I spend too much time procrastinating.&lt;/p&gt;

&lt;p&gt;It’s not that I lack self-control. During the moment, every single one of my actions was cold and calculated, sharp as a fork, as rational as 7/11 and as carefully coordinated by the United States government lizardmen as 9/11. I had come home; I had to eat lunch; I had no idea what variational calculus was; and I’m an efficient productive multithreaded individual. Therefore, the logical next step is to fire up some lectures on &lt;a href=&quot;https://www.youtube.com/playlist?list=PLdgVBOaXkb9CD8igcUr9Fmn5WXLpE8ZE_&quot;&gt;variational calculus&lt;/a&gt; at 2x speed. But before I knew it, the playlist was over and my lunch was not. Since I had been so studious over the past 37 minutes and 40.5 seconds, and humans are just carbonated multiprogrammable megacontrollers, surely I could entertain myself with random YouTube videos until I finished eating?&lt;/p&gt;

&lt;p&gt;I finished lunch three hours later, though it still kinda felt worth it, since I had learned three live lectures of content in the first 37 minutes and 40.5 seconds, but the remaining two-odd hours just disappeared. Just two weeks after the fact, I have absolutely no idea what I watched, although I do remember thinking, “Wow, this is highly educational and applicable to my everyday life in society, let’s watch another one,” and now I know that although the Illuminati was banned and dissolved in the late 1700s by the Duke of Bavaria, there is concrete YouTube proof that divers lizardmen escaped dissolution by hiding in the most discreet positions known to humanity at that time: our very own United States government. It was getting a bit ridiculous and I still had an orchestration assignment to do, so I activated a Chrome extension that &lt;a href=&quot;https://chrome.google.com/webstore/detail/stayfocusd/laankejkbhbdhmipfmgcngdelahlfoji&quot;&gt;blocks certain websites&lt;/a&gt;, specifically YouTube.&lt;/p&gt;

&lt;p&gt;And that’s why I spent three more hours mindlessly surfing Reddit. Because YouTube was blocked, so what else could I do? Again, the information I retained two weeks later are the memory of thinking, “I’m glad that I read &lt;a href=&quot;https://www.reddit.com/r/legaladvice/comments/9mrpd2/&quot;&gt;this post&lt;/a&gt;, now if I ever get a boyfriend who’s a doctor with access to class C amnestics, I’ll remember to check for bed bugs,” and the knowledge that snails have &lt;a href=&quot;https://www.smithsonianmag.com/smart-news/spider-silk-loses-top-spot-natures-strongest-material-snails-teeth-180954346/&quot;&gt;thousands of teeth&lt;/a&gt;, whose tensile strength is five times stronger than spider silk, which is a helpful incentive when you need to be encouraged to run away from evil snails that are chasing you down. Then I blocked Reddit too, but found myself on Hacker News. Then I blocked that, and found myself on Wikipedia, which I blocked, but found myself on Quora, then Google News, then Yahoo Answers, then Digg, etc., etc. ad infinitum until eventually I found myself on &lt;a href=&quot;https://www.kongregate.com/&quot;&gt;Kongregate&lt;/a&gt; and re-installing Flash to play free online games (without cost) from 2007. I remember the screen sizes seeming much larger when I was half my age. That last burst of Kongregate at 2:00 AM turned out to be the only productive activity I did after blocking YouTube, because we ultimately decided on building a spiritual dual to &lt;a href=&quot;https://www.kongregate.com/games/funkypear/gravitee&quot;&gt;Gravitee&lt;/a&gt; for our classical mechanics project, but it wasn’t my idea so I guess it wasn’t productive after all.&lt;/p&gt;

&lt;p&gt;Anyway, at that point I realized I would be sick.&lt;/p&gt;

&lt;p&gt;On reflection, it was false that it wasn’t that I lacked self-control. None of my decisions made any sense. The only truth is that my actions were as carefully coordinated as 9/11, since neither one was coordinated. Sure, YouTube and Reddit are fun, and Hacker News is pretty interesting, but Quora? Google News? I didn’t actually go to Digg, but I really had to stop and brainstorm for a full minute, “I want to waste my time. What website haven’t I blocked?” in order to remember that Flash games were fun a decade ago. Well, I beat &lt;a href=&quot;https://www.kongregate.com/games/funkypear/gravitee-wars&quot;&gt;Gravitee Wars&lt;/a&gt; and it was not fun at all. It didn’t seem like it would be fun when I decided to play, it wasn’t fun while I was playing, and it wasn’t fun after I finished playing. It would probably have been more fun if I didn’t play, and just sat on my chair, staring at the wall or at my piles of unorganized assignments for two hours instead. So not only did I lack self-control, I lacked it so much that I self-controlled myself (for free) in the &lt;em&gt;opposite direction&lt;/em&gt;: it took me conscious effort to waste my time, and I probably ended up unhappier than with the null hypothesis.&lt;/p&gt;

&lt;p&gt;(Apologies to FunkyPear, whose games I really did like, in 2007.)&lt;/p&gt;

&lt;p&gt;So why did I consciously, purposefully, through much effort physical and mental, strive to waste two days of my time, and then three more (by being badly bedridden, boooo)? I think it’s because I was already sick. The physical symptoms—cough, fever, extreme death—only showed up the day of the flight, but I think I’ve just described my mental symptoms of illness. I somehow never noticed until now, but with hindsight, I can’t remember a single instance in which I became sick and &lt;em&gt;didn’t&lt;/em&gt; waste my last healthy day in a similar manner to that previously described. Of course, this might be because my memory sucks now that it’s crammed full of useless information (did you know that snails can sleep &lt;a href=&quot;https://www.dailytreasure.com/how-long-can-a-snail-sleep/&quot;&gt;for three years&lt;/a&gt;?), or maybe I’ve simply wasted every single day of my life, including the last healthy ones before sickness. But if you’ll just increase your confidence in me a smidgen, actually, I don’t care about your confidence in me, I’m confident in myself when I say, it’s not my fault.&lt;/p&gt;

&lt;p&gt;The traditional view on procrastination, according to expert testimony from as me and myself, is that it’s a simple failing of willpower. If you have enough willpower, you can convince yourself that submitting that assignment now instead of later will significantly decrease your stress levels, and reading about the phantom time hypothesis now instead of later will not have any positive impact on your life whatsoever. I tend to agree in general, which is why I haven’t been to Hacker News, Yahoo Answers, Kongregate, Digg, or the American Online Portal for many months, due to my impressive willpower. It even seems to apply to this situation: since I’m sick, my willpower obviously drops as I exert more energy to unsick myself, and I end up procrastinating.&lt;/p&gt;

&lt;p&gt;It’s still not my fault, but it’s also not true. My getting sick is an edge case, where I seemingly lose all ability to do any productive work. To be realistic, the real reason I haven’t visited any of those aforementioned websites are that they’re not entertaining enough, especially compared to Reddit or YouTube. When I’m healthy, I have no urge to waste my time on these sites, and no great urge to scroll endlessly through Reddit or YouTube either. But when I’m sick, somehow wasting my time becomes a task of the highest priority, and I literally can’t do anything else, also it’s totally not my fault at all, I told you, lizardmen control my body and mind.&lt;/p&gt;

&lt;p&gt;I’ve rambled long enough. What was this post about again? Right, new year’s resolutions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Year’s Resolution #1: Don’t be sick.&lt;/strong&gt; If I want to avoid this situation in the future, all I have to do is not get sick. That means getting eight hours of rest every night, following the &lt;a href=&quot;https://food-guide.canada.ca/en/&quot;&gt;Canada Food Guide&lt;/a&gt; by eating food on plates, getting at least five minutes of sunlight or fifteen minutes of fluorescent light every day, and so forth. But I’ll probably still get sick the day before the ACM-ICPC world finals with my luck.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Year’s Resolution #2: Go to sleep.&lt;/strong&gt; Even if the five minutes of sunlight fails and I end up sick, I could have at least avoided this lingering sense of guilt and loss of self-worth by staying in bed instead of scrambling around searching for obscure web portals from the naughties, and I probably would have sped up my recovery too. I must have thought to go sleep dozens of times, at least every time after I blocked a new site, but due to my lack of new year’s resolutions to guide my behaviour, my thoughts went unheeded. Now, armed with these resolutions, I’ll either not get sick or not feel bad after getting sick, so I think my problem is solved.&lt;/p&gt;

&lt;p&gt;There are other aspects of this situation that weren’t due to being sick, that is to say, they were 100% totally my fault. For example, on my identity as an efficient productive multithreaded individual: every single one of those words, when applied to myself, describes an hypothetical object that does not exist in spacetime. In particular, I can multitask, but only with a single thread, and context switches take longer than you’d expect. I know this, I’ve known this forever, if you put a TV in front of me I won’t finish eating until the show’s over, if you put a Dr. Jon Mikkelsen in front of me I won’t finish eating until the lecture’s over, so putting a YouTube in front of me, with videos optimized to be maximally addictive, can’t possibly aid in digestion. (In fact, you’ll find that “Baby shark, doo doo doo doo doo doo,” is one among many solutions to the Euler–Lagrange equations that extremize a certain Google Cloud Functional.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Year’s Resolution #3: Don’t multitask while eating.&lt;/strong&gt; Trying to multitask is so stimulating and exhilarating, I can’t help but seek that sense of pride and accomplishment that I know I’ll never get from successfully multitasking, because I can’t. So I’m not willing to give it up, but at least I’ll get rid of the most pernicious combinations. The main reason more than half my courses were below the class average during the robot summer was because I lived on campus, so without my parents’ sleep schedule restricting my own, I would usually eat dinner from 11:00 PM to 4:00 AM and never go to class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Year’s Resolution #4: Procrastinate on something fun.&lt;/strong&gt; It’s flagrantly shameful when I start browsing Quora to procrastinate while I’m sick, but even when I’m healthy, procrastinating isn’t very fun. You can’t learn anything from YouTube, and Reddit isn’t meant to entertain, it’s meant for lol’ing in your head and upvoting with a blank expression, except for &lt;a href=&quot;https://www.reddit.com/r/AskOuija/&quot;&gt;/r/AskOuija&lt;/a&gt;, which I found while I was sick and it still remains hilarious for no reason. I can’t remember the last time I played a fun video game (Gravitee Wars doesn’t count), and all my memories of brimming with expectation and excitement as school ended, sprinting home to play the next level of Super Fun Adventure Game 3—you know, what you expect procrastination to feel like—all those memories are from elementary school.&lt;/p&gt;

&lt;p&gt;One potential outlet for procrastination is those Chinese light novels that my brother spent all of his Christmas vacation reading. We’d be eating dinner at a family gathering, he’s on his phone scrolling. Watching a movie in a crowded theatre—on his phone, scrolling. Camping out in a rural house with no internet—phone, scrolling. In the shower—scrolling. I started reading with the &lt;a href=&quot;https://chrome.google.com/webstore/detail/zhongwen-chinese-english/kkmlkkjojmombglmlpbpapmhcaljjkde?hl=en&quot;&gt;Zhongwen extension&lt;/a&gt; and it’s actually pretty easy. I even learned new words, like 迅猛龙, which means velocidragon. This is a great outlet because I get tired after reading a chapter or two, and I end up getting back to work. Wait, what on earth is a velocidragon??&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Year’s Resolution #5: Ten minutes of Reddit per day.&lt;/strong&gt; I’ve set up &lt;a href=&quot;https://chrome.google.com/webstore/detail/stayfocusd/laankejkbhbdhmipfmgcngdelahlfoji&quot;&gt;StayFocusd&lt;/a&gt; to block both Reddit and chrome://extensions, so I literally have no way out. So far I haven’t had any withdrawal symptoms, other than not posting as frequently, which is really a good thing.&lt;/p&gt;

&lt;p&gt;Somehow this post is reaching an end. It’s been an amazing journey. I’d like to thank my sponsors, Docker and the Московская городская телефонная сеть публичное акционерное общество, please stop reading these posts Brandon, otherwise like and subscribe. Why are my new year’s resolutions so short? Historically, all my previous new year’s resolutions (and goals in general) were simply, “stop procrastinating,” with the expected results. This year, I have a realistic shot of achieving all five resolutions and incorporating them into my personal routine. When Code to Win comes around next year, hopefully I’ll still be invited, despite cancelling last-minute every year, and hopefully I won’t be sick, so I can enjoy the free trip, all-expenses-paid hotel, flight included (without cost, without charge), and complimentary unlimited (free) food. I’m so good at writing conclusions.&lt;/p&gt;

</description>
        <pubDate>Tue, 01 Jan 2019 00:00:00 -0800</pubDate>
        <link>https://eyqs.ca/blogs/1901-new-year/</link>
        <guid isPermaLink="true">https://eyqs.ca/blogs/1901-new-year/</guid>
        
        
      </item>
    
      <item>
        <title>UBC Contemporary Music Concert Report, 2018 Winter Term 1</title>
        <description>&lt;p&gt;Technically, this is supposed to be a report on all the UBC contemporary music concerts that have happened this term, but it just so happens that all of these concerts happened in November, so here’s the 2018 November concert report. Me being lazy, I didn’t actually write up the post until now, so my memories of the earlier concerts are pretty hazy. Taking notes helps a little, but I can’t see what I’m writing in the dark, so it usually ends up being gibberish.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;ubc-contemporary-players-ensemble-2018-november-9&quot;&gt;UBC Contemporary Players Ensemble, 2018 November 9&lt;/h2&gt;

&lt;h3 id=&quot;13-studies-for-instruments&quot;&gt;13 Studies for Instruments&lt;/h3&gt;
&lt;h4 id=&quot;frederic-rzewski-for-unspecified-instrumentation&quot;&gt;Frederic Rzewski; for unspecified instrumentation&lt;/h4&gt;

&lt;p&gt;All four of the studies played (3, 5, 8, 10) were pretty boring, but the Contemporary Players equally spaced themselves around the concert hall, so you could hear different timbres from different directions all playing the same boring gestures. Only the piano was on the stage; going clockwise, we had the violin, flute/piccolo, euphonium, trumpet, and viola.&lt;/p&gt;

&lt;p&gt;I found a &lt;a href=&quot;https://www.youtube.com/watch?v=8gYCQgoDrT0&quot;&gt;recording with eight cellos&lt;/a&gt;, which is the exact opposite of what Rzewski intended, “to maintain the distinct color of each instrument as much as possible”. I don’t know whose numbering is wrong but I’m pretty sure the first three studies in both the concert and that video are the same, and the Study 5 in concert was much more interesting, with each trill in a different colour and register, spanning a range of seven octaves instead of four. Study 10 (“Bousculade”) started off more lively, with more movement and more dynamics, almost like a stampede, and I loved it. But then, they moved the main melody to the next instrument and repeated it. Then, they repeated it with the next instrument, and again, and again, and again. Although the main instrument changed, the background timbres basically remained the same, so there really wasn’t much variation, and basically it became boring.&lt;/p&gt;

&lt;h3 id=&quot;the-blue-pages&quot;&gt;The Blue Pages&lt;/h3&gt;
&lt;h4 id=&quot;michael-torke-for-flute-bass-clarinet-violin-cello-and-piano&quot;&gt;Michael Torke; for flute, bass clarinet, violin, cello, and piano&lt;/h4&gt;

&lt;p&gt;I love Torke. He’s one of my favourite contemporary composers because all his works are so accessible to uneducated tonedeaf amateurs like myself, and &lt;a href=&quot;https://www.youtube.com/watch?v=j85liYywp3M&quot;&gt;&lt;em&gt;Telephone Book&lt;/em&gt;&lt;/a&gt; is one of my favourites, so I have nothing to say, except I couldn’t hear the cello over the bass clarinet.&lt;/p&gt;

&lt;p&gt;The Contemporary Players decided to make their own transitions between each of the pieces, so that the entire concert would be a continuous flow of music with neither pause nor applause. All but one of these transitions were simply a single line in the next piece (trombone, soprano, and clarinet/cello respectively) rudely interrupting the conclusion of the previous piece, which is hardly a transition at all. The only real transition was into &lt;em&gt;The Blue Pages&lt;/em&gt;, with the piano randomly playing its accompanying figures as the violin was finishing up the sixth repetition (ugh) of Study 10. Everyone kinda slipped into the dressing room or slid onto the stage under that piano accompaniment, which lasted for more than a minute. It kinda ruined the pace of the piece, and was generally a bizarre decision, but I guess that’s contemporary music for ya.&lt;/p&gt;

&lt;h3 id=&quot;the-little-fix&quot;&gt;The Little Fix&lt;/h3&gt;
&lt;h4 id=&quot;györgy-kurtág-for-piccolo-trombone-and-guitar&quot;&gt;György Kurtág; for piccolo, trombone, and guitar&lt;/h4&gt;

&lt;p&gt;I didn’t think the first movement was in the manner of Mussorgsky, and I didn’t think the second movement was in the manner of Stravinsky, but since Kurtág says so, I’ll believe it. The instrumentation is kinda weird, because the guitar is really too soft to accompany a piccolo and trombone. About the music, I particularly enjoyed the last movement because of the slow flow of information per unit time and the cool extended trombone techniques, which sounded &lt;a href=&quot;https://www.youtube.com/watch?v=N77XdjcF_dw&quot;&gt;like bombers overhead&lt;/a&gt;. Unlike Rzewski’s studies, each movement had an obvious sense of direction, and by feeding us this development so slowly in the last movement, Kurtág could keep our attention focussed on these miniscule changes without running out of music.&lt;/p&gt;

&lt;h3 id=&quot;kuyas&quot;&gt;Kuyas&lt;/h3&gt;
&lt;h4 id=&quot;harry-somers-for-soprano-voice-flute-and-percussion&quot;&gt;Harry Somers; for soprano voice, flute, and percussion&lt;/h4&gt;

&lt;p&gt;For some reason, the soprano started under the stage and slowly walked up as the piece progressed, and I don’t know how that affected me. The beginning was a vocal solo, and the first drum beat beat my heart into my throat. The recording &lt;a href=&quot;https://www.youtube.com/watch?v=GKpJOdjFInk&quot;&gt;of this performance&lt;/a&gt; just can’t pick up just how much that beat me up, and the last few “kuyas” in the voice also felt much more emotionally powerful live. I thought the musical language was distinctly native American, so it didn’t surprise me that Somers included &lt;em&gt;Kuyas&lt;/em&gt; in his opera &lt;em&gt;Louis Riel&lt;/em&gt;, written for the Canadian centennial in 1967.&lt;/p&gt;

&lt;h3 id=&quot;neon&quot;&gt;Neon&lt;/h3&gt;
&lt;h4 id=&quot;alexina-louie-for-clarinet-cello-and-piano&quot;&gt;Alexina Louie; for clarinet, cello, and piano&lt;/h4&gt;

&lt;p&gt;Almost everything I wrote down was about what happened in the music, but you can &lt;a href=&quot;https://www.youtube.com/watch?v=549JVsboMnw&quot;&gt;just listen to it yourself&lt;/a&gt;, although the concert only had movements 1 and 4. I listened expecting something about faded neon lights over grimy alleys in the downtown eastside, but the slowly converging unisons and gentle yet imposing chords are so hauntingly beautiful that it can’t just be “neon”.&lt;/p&gt;

&lt;p&gt;What a great way to end the concert, with two of the foremost Canadian composers! After an eternity of silence (like 10 seconds), the pent-up applause repeated like five times, so it became boring and my hands hurt.&lt;/p&gt;

&lt;h2 id=&quot;ubc-composers-concert-2018-november-19&quot;&gt;UBC Composers Concert, 2018 November 19&lt;/h2&gt;

&lt;h3 id=&quot;snow-eternally-falling&quot;&gt;snow eternally falling&lt;/h3&gt;
&lt;h4 id=&quot;robert-humber-for-soprano-voice-two-percussionists-and-two-pianos&quot;&gt;Robert Humber; for soprano voice, two percussionists, and two pianos&lt;/h4&gt;

&lt;p&gt;You might expect from the snow and decapitalization a serene, wistful piece, with soft strikes of the xylophone like snowflakes punctuating an undulating soprano over whispering pianos, and that’s exactly what we got at the beginning. Humber used up literally every instrument in the drum kit to continue that snowflake effect as the piece progressed, so that even the page flips felt like they were in the score, especially given how soft and still the music was.&lt;/p&gt;

&lt;p&gt;But even as the intensity picked up, the piece just kept on progressing, rising in tempo and intensity and eventually leading to a section with just the percussionists going absolutely nuts on the drums. I wouldn’t be surprised if it was taken straight from a rock concert. The piano parts sounded just as &lt;em&gt;contemporary&lt;/em&gt;, flooding the room with random notes and chords like the percussion instrument it’s supposedly classified to be. I was a bit confused by the brief out-of-place tonal melody at the beginning, repeated at the end but never heard anywhere else, so I wonder if this was part of a larger work.&lt;/p&gt;

&lt;h3 id=&quot;deconstructions-on-life&quot;&gt;Deconstructions on Life&lt;/h3&gt;
&lt;h4 id=&quot;michael-kirchmayer-for-solo-piano&quot;&gt;Michael Kirchmayer; for solo piano&lt;/h4&gt;

&lt;p&gt;I don’t know why they didn’t put Kirchmayer’s birthday in the program, because I somehow thought that he was some famous 20th century composer literally until I started this post and realized, oh, he’s just Michael. I doubly should have known, given that this was the UBC composers concert! Anyway, I didn’t understand the piece at all and chalked it up at the time to famous 20th century composers playing 5D chess while I was playing checkers.&lt;/p&gt;

&lt;p&gt;The first movement, &lt;em&gt;Ritual&lt;/em&gt;, was dreary, with indistinct clusters of white keys in the same texture and rhythm throughout, so it was a ritual like waking up every day and going to work, not a religious or magic ritual. &lt;em&gt;Trauma&lt;/em&gt; was basically the same, but with a bit more movement. You might write an interesting story behind this, about how first-world traumas are tiny little changes (compared to war or famine), or conversely about how tiny little changes can cause actual trauma and pain. Both movements were tightly controlled, emotionally and musically, but for some reason &lt;em&gt;Cognitive Behavioural Therapy&lt;/em&gt; brought out light-hearted grace notes, and &lt;em&gt;Post-Mortem&lt;/em&gt; was some half-minute cheerful after-credits scene, all with the same clusters of white keys. Maybe that’s how therapy works? I really wish he gave program notes.&lt;/p&gt;

&lt;h3 id=&quot;growing-pains&quot;&gt;Growing Pains&lt;/h3&gt;
&lt;h4 id=&quot;greg-andersen-for-solo-piano&quot;&gt;Greg Andersen; for solo piano&lt;/h4&gt;

&lt;p&gt;This also sounded like some famous 20th century composer, not of contemporary classical music, but of jazzy film music. I’d listen to this on repeat, though artistically there wasn’t much to discuss, especially compared to &lt;em&gt;Deconstructions on Life&lt;/em&gt; (which I don’t understand at all). Last year, Dr. Chatman told us he noticed how well someone used ostinato in her piano piece, and then realized that ostinato was the focus of the assignment she composed the piece for! And so it was with me: I wrote “nice and simple ostinato” in my notes, and just now realized that Andersen must have written this for his MUSC 107 piano/ostinato assignment. The piece ended just as I expected it to launch into a contrasting B section, which was a bit of a shame.&lt;/p&gt;

&lt;h3 id=&quot;poor-girl&quot;&gt;Poor Girl&lt;/h3&gt;
&lt;h4 id=&quot;roan-shankaruk-for-soprano-voice-and-piano&quot;&gt;Roan Shankaruk; for soprano voice and piano&lt;/h4&gt;

&lt;p&gt;“Poorly nourished, overtaxed from having to go to work at an early age, tired out, worn down, and not even twenty-eight. Poor girl!”&lt;/p&gt;

&lt;p&gt;The text is from the Austrian novel &lt;em&gt;The Post Office Girl&lt;/em&gt; (thanks, Google), and this piece wouldn’t feel out of place in a movie or musical adaptation, owing mostly to Shankaruk’s absolutely gorgeous melodies and harmonization. Even as I type this a month later, I can almost hear the soaring strings accompanying the melody in this hypothetical musical.&lt;/p&gt;

&lt;p&gt;Unfortunately, the pianist was replaced at the last minute, and the replacement might have been sight-reading the entire thing, which made the piano gestures less convincing. The opening texture was very effective, with the piano twinkling in the highest register, but there were times in the middle where the purpose of the piano accompaniment was unclear, and it might have been better with a straight homophonic texture rather than inventing so many random gestures. I’d love to hear what this would sound like for full string orchestra, where for example the trills would sound much more idiomatic.&lt;/p&gt;

&lt;h3 id=&quot;clearance-7ft-11in&quot;&gt;Clearance 7ft. 11in.&lt;/h3&gt;
&lt;h4 id=&quot;jon-bogert-for-solo-trumpet&quot;&gt;Jon Bogert; for solo trumpet&lt;/h4&gt;

&lt;p&gt;As you expect from the title, this piece was bizarre. I can best describe it as “a series of notes”, like in the first MUSC 100 assignments on focal pitches before we learned about tonality. Later on, the trumpeter put in a mute and continued the series of notes, but then the trumpeter put in a Harmon mute and started “wah-wah”ing for more than a minute and I heard people laughing around me and what was the point? Was it supposed to be funny? Then why was the rest of the piece so academic? Was picking up and putting down the mutes so cautiously part of some visual performance too? I was confused for the rest of the piece and even more confused when the piece just suddenly ended. But rather than merely not understanding something, which happens all the time in my mech courses, it’s refreshing to just be utterly flummoxed once in a while.&lt;/p&gt;

&lt;h3 id=&quot;misplaced-dream&quot;&gt;Misplaced Dream&lt;/h3&gt;
&lt;h4 id=&quot;iván-salazar-gonzález-for-solo-flute&quot;&gt;Iván Salazar González; for solo flute&lt;/h4&gt;

&lt;p&gt;The first movement, &lt;em&gt;Blurred Memory&lt;/em&gt;, was like the previous trumpet piece but for flute, and with fluttertongue instead of “wah-wah”s. I think the key premise is the main motive gets distorted throughout the piece like a blurred memory, but it didn’t impact me emotionally and I barely remember it. The second movement, &lt;em&gt;Ritmico&lt;/em&gt;, was completely different and all over the place, with heavy syncopation, large leaps (like octaves), and tempo changes, so it was much more exciting but I also don’t remember it. Basically I have no opinions.&lt;/p&gt;

&lt;h3 id=&quot;redemption-zest-frost-twilight&quot;&gt;Redemption, Zest, Frost, Twilight&lt;/h3&gt;
&lt;h4 id=&quot;isaac-zee-for-soprano-voice-and-string-quartet&quot;&gt;Isaac Zee, for soprano voice and string quartet&lt;/h4&gt;

&lt;p&gt;The original piece was Zee’s &lt;em&gt;Avdiutt&lt;/em&gt;, but the original soprano couldn’t make it, so Roan Shankaruk stepped in to sing his other work, which means that she was the only singer in the entire concert, singing for almost half the pieces! Poor girl. She literally squeaked alongside the violin (played by Zee himself) for almost the whole piece, creating an absolutely fascinating texture with their synchronized slides and glissandos and harmonics wailing like sirens. There’s no way they could have sight-read this.&lt;/p&gt;

&lt;p&gt;Unfortunately my notes suddenly cut off and I don’t remember the rest, so basically I have no opinions. This is why I’m going to start writing these posts immediately after the concerts next time…&lt;/p&gt;

&lt;h2 id=&quot;ubc-contemporary-players-concert&quot;&gt;UBC Contemporary Players Concert&lt;/h2&gt;

&lt;h3 id=&quot;undercurrents&quot;&gt;Undercurrents&lt;/h3&gt;
&lt;h4 id=&quot;jordan-nobles-for-two-flutes-bass-clarinet-violin-viola-and-vibraphone&quot;&gt;Jordan Nobles; for two flutes, bass clarinet, violin, viola, and vibraphone&lt;/h4&gt;

&lt;p&gt;I don’t have many opinions or many words or much time left, so the rest of these will be short. This concert didn’t have any weird transitions.&lt;/p&gt;

&lt;p&gt;I thought the opening, with each performer walking onto the stage individually, was pointless and distracting, especially the sound of high heels. There was an overwhelming feeling of something missing, which might have been the lower registers, which were only filled by the bass clarinet and the viola for a brief passage. For something titled &lt;em&gt;Undercurrents&lt;/em&gt;, the undercurrents were noticeably not emphasized. The cadences, in parallel octaves, felt hollow and ethereal, like the music was just floating in the air with no clear direction or purpose. The timbral mix and interplay between different colours were silky smooth, and clearly Nobles has mastered the art of orchestration, but I ended up feeling hollow by the end too, so I didn’t really like it.&lt;/p&gt;

&lt;h3 id=&quot;wildcat&quot;&gt;Wildcat&lt;/h3&gt;
&lt;h4 id=&quot;stephen-chatman-for-solo-flute&quot;&gt;Stephen Chatman; for solo flute&lt;/h4&gt;

&lt;p&gt;This was an interesting virtuosic piece jam-packed with fluttertongue by a UBC composition professor himself, and the nice contrast between the rhythmic and chaotic outer sections with the peaceful bends in the inner section gave it solid structure. The flautist was incredibly skilled, tounging each articulation with elegance and precision. But it’s hard to make a flute sound like a wildcat and I got bored right at the large descending and ascending scales. But then the piece ended, so I guess I wasn’t bored after all.&lt;/p&gt;

&lt;h3 id=&quot;prelude-no-2&quot;&gt;Prelude no. 2&lt;/h3&gt;
&lt;h4 id=&quot;peter-krejcar-for-solo-piano&quot;&gt;Peter Krejcar; for solo piano&lt;/h4&gt;

&lt;p&gt;Krejcar is a pianist in the Contemporary Players, so his composition here was the only one by a current student. It was basically a Chopin prelude with a random tremolo stuck near middle C that incessantly trembled for the entirety of the piece. I didn’t have any opinion about the tremolo: it was kinda just there, neither adding anything substantial nor detracting anything from the piece. I think having the tremolo made it harder to coordinate more interesting rhythms, so the rhythm was basically plain quarter notes throughout. I would have loved to hear a contrasting section in the middle to shine the tremolo in a different light, but that never happened, and instead it just suddenly ended with no preparation or climax. It was OK, I guess.&lt;/p&gt;

&lt;h3 id=&quot;étude-no-8-fém-from-études-pour-piano-book-2&quot;&gt;Étude no. 8, “Fém”, from Études pour piano, Book 2&lt;/h3&gt;
&lt;h4 id=&quot;györgy-ligeti-for-solo-piano&quot;&gt;György Ligeti; for solo piano&lt;/h4&gt;

&lt;p&gt;I love this piece, just &lt;a href=&quot;https://www.youtube.com/watch?v=QYNCMIHgaaA&quot;&gt;listen to it&lt;/a&gt; and you immediately know it’s Ligeti. Krejcar played skillfully, although the page turner missed a turn.&lt;/p&gt;

&lt;h3 id=&quot;trio-suite&quot;&gt;Trio Suite&lt;/h3&gt;
&lt;h4 id=&quot;keith-bissell-for-trumpet-horn-and-trombone&quot;&gt;Keith Bissell; for trumpet, horn, and trombone&lt;/h4&gt;

&lt;p&gt;I have no real opinions here. Dr. Chatman randomly said “orchestration” out loud right before the piece started, maybe because it’s hard to make three brass instruments sound good alone, without any string or woodwind accompaniment.&lt;/p&gt;

&lt;h3 id=&quot;immutable-dreams&quot;&gt;Immutable Dreams&lt;/h3&gt;
&lt;h4 id=&quot;kati-agócs-for-flute-clarinet-violin-cello-and-piano&quot;&gt;Kati Agócs; for flute, clarinet, violin, cello, and piano&lt;/h4&gt;

&lt;p&gt;I’m really out of words, but thankfully I have no opinions either. I can’t believe I’m procrastinating on writing blogs.&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Nov 2018 00:00:00 -0700</pubDate>
        <link>https://eyqs.ca/blogs/1811-music-18w1/</link>
        <guid isPermaLink="true">https://eyqs.ca/blogs/1811-music-18w1/</guid>
        
        
      </item>
    
      <item>
        <title>Dismantling the UBC SEEDS Mug Share Pilot Vending Machine</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/images/blogs/1809/before.png&quot; alt=&quot;A series of five pictures showcasing the state of the Mug Share pilot vending machine before dismantling.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a bunch of pictures showing the Mug Share pilot vending machine before I dismantled it. There’s a bunch of pictures showing the Mug Share pilot vending machine after I dismantled it. Stay tuned to find out what on earth the Mug Share pilot vending machine is!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogs/1809/after.png&quot; alt=&quot;A series of two pictures showcasing the state of the Mug Share pilot vending machine after dismantling.&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Sep 2018 00:00:00 -0700</pubDate>
        <link>https://eyqs.ca/blogs/1809-mug-share/</link>
        <guid isPermaLink="true">https://eyqs.ca/blogs/1809-mug-share/</guid>
        
        
      </item>
    
      <item>
        <title>Living in the Sunny Santa Clara Valley, Working in Sunnyvale</title>
        <description>&lt;p&gt;I interned at Google in Sunnyvale recently, and I’ll write a reflection on it later…&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Aug 2018 00:00:00 -0700</pubDate>
        <link>https://eyqs.ca/blogs/1808-sunny-vale/</link>
        <guid isPermaLink="true">https://eyqs.ca/blogs/1808-sunny-vale/</guid>
        
        
      </item>
    
      <item>
        <title>The 2018 GCP NEXT Google Cloud Platform Live Cloud Conference Next Event '18</title>
        <description>&lt;p&gt;I went to Google Cloud Next recently, and I’ll write a report on it later…&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jul 2018 00:00:00 -0700</pubDate>
        <link>https://eyqs.ca/blogs/1807-cloud-next/</link>
        <guid isPermaLink="true">https://eyqs.ca/blogs/1807-cloud-next/</guid>
        
        
      </item>
    
      <item>
        <title>Weird Things From JavaScript, Because I Don't Know JavaScript</title>
        <description>&lt;p&gt;I’m currently reading Kyle Simpson’s &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/&quot;&gt;You Don’t Know JS&lt;/a&gt; (YDKJS), the &lt;a href=&quot;https://github.com/search?q=stars%3A%3E80000&quot;&gt;eighth-most starred project on GitHub&lt;/a&gt;, often considered the best JavaScript series ever written, and it is the best JavaScript series I’ve ever read. If you’re going to really work with JavaScript, or Node.js, or TypeScript, please just read &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/up%20%26%20going/ch3.md&quot;&gt;this summary&lt;/a&gt; to see everything you’re missing out on.&lt;/p&gt;

&lt;p&gt;But although the explanations are extremely comprehensive (yet mysteriously brief), there’s no end-of-chapter problems for me to solidify my understanding. If you’ve read that summary, you’ll think that Kyle’s favourite word is “perhaps” and his favourite hobby is debunking common misconceptions, demystifying widespread myths, tackling persistent mistruths, and overthrowing conventional wisdom about JavaScript. His eternal enemies are all the commoners who pause at a WTF moment, shrug their shoulders, and say resignedly, “Just JavaScript, eh?”&lt;/p&gt;

&lt;p&gt;So what better way to test my newfound knowledge than by addressing all these WTFs?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The format of this post is slightly awkward, since I can’t link to sections within each chapter of YDKJS, but I’ll generally address each WTF with a direct quote from YDKJS. The first three words of the quote will be a link to the relevant chapter, so just Ctrl+F in the chapter until you find the context of the quote.&lt;/p&gt;

&lt;h3 id=&quot;wtfjs&quot;&gt;WTFJS&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/et8xNAc2ic8&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Brian Leroux’s WTFJS was the original “Weird Things From JavaScript” talk, before everybody got tired of the same nits about type coercion and IEEE 754 floating-point numbers over and over again. YDKJS only has two rules about type coercion, and I’ll add a third:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;If either side&lt;/a&gt; of the comparison can have &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; values, don’t ever, EVER use &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If either side of the comparison can have &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; values, seriously consider not using &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Otherwise, use &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; to allow type coercion, and &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt; to forbid it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, on to the play-by-play.&lt;/p&gt;

&lt;p&gt;0:00: Introduction.&lt;/p&gt;

&lt;p&gt;1:08: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;The so-called “falsy”&lt;/a&gt; values list is: &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;+0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;1:50: Rule 1. &lt;code class=&quot;highlighter-rouge&quot;&gt;null != false&lt;/code&gt; makes sense, but the others are two of the seven items on the &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;“bad list”&lt;/a&gt;. Don’t do this!&lt;/p&gt;

&lt;p&gt;2:30: Brian explains the next few WTFs.&lt;/p&gt;

&lt;p&gt;3:30: Rule 2. &lt;code class=&quot;highlighter-rouge&quot;&gt;0 == &quot;0&quot;&lt;/code&gt; actually kinda makes sense, but &lt;code class=&quot;highlighter-rouge&quot;&gt;0 == &quot;&quot;&lt;/code&gt; definitely doesn’t.&lt;/p&gt;

&lt;p&gt;3:45: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;&lt;/a&gt; can be treated as indistinguishable for comparison purposes, if you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; loose equality operator to allow their mutual implicit coercion.&lt;/p&gt;

&lt;p&gt;4:00: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/up%20%26%20going/ch2.md&quot;&gt;There is a&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; (capital S) object wrapper form that pairs with the primitive &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; type. Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;'I am a string'&lt;/code&gt; is a primitive &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; (after all, &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof 'asdf' == 'string'&lt;/code&gt;), so it’s obviously not an instance of any object.&lt;/p&gt;

&lt;p&gt;4:20: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;Chapter 4&lt;/a&gt; and &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch3.md&quot;&gt;chapter 3&lt;/a&gt; of Types &amp;amp; Grammar cover coercion (&lt;code class=&quot;highlighter-rouge&quot;&gt;String('a')&lt;/code&gt;) and natives (&lt;code class=&quot;highlighter-rouge&quot;&gt;new String('a')&lt;/code&gt;) respectively. Coercion gives a primitive &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;, and natives give the &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; object wrapper. Brian explains how &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; coerced the object wrapper into its string representation, giving us the result we expect by Rule 3. It’s not so weird after all!&lt;/p&gt;

&lt;p&gt;5:31: Brian explains this.&lt;/p&gt;

&lt;p&gt;5:48: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt; operator&lt;/a&gt; inspects the type of the given value, and always returns one of seven string values. So &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt; anything that’s not a &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;symbol&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;6:07: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch3.md&quot;&gt;Values that are&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof &quot;object&quot;&lt;/code&gt; (such as an array) are additionally tagged with an internal &lt;code class=&quot;highlighter-rouge&quot;&gt;[[Class]]&lt;/code&gt; property. This property can generally be revealed indirectly by borrowing the default &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype.toString(..)&lt;/code&gt; method called against the value.&lt;/p&gt;

&lt;p&gt;6:40: Brian explains the next few WTFs.&lt;/p&gt;

&lt;p&gt;9:00: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;If either operand&lt;/a&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;, the operation will be string concatenation. But &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; operator&lt;/a&gt; is defined only for numeric subtraction, so &lt;code class=&quot;highlighter-rouge&quot;&gt;a - 0&lt;/code&gt; forces &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;’s value to be coerced to a &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;9:27: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;If the first&lt;/a&gt; character was &lt;code class=&quot;highlighter-rouge&quot;&gt;'0'&lt;/code&gt;, the guess was that you wanted to interpret the &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; as an octal (base-8) &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;. But as of ES5, &lt;code class=&quot;highlighter-rouge&quot;&gt;parseInt(..)&lt;/code&gt; no longer guesses octal, and you’d have to do &lt;code class=&quot;highlighter-rouge&quot;&gt;parseInt('0o8')&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;9:49: This was the only WTF in this talk that wasn’t covered in YDKJS. Going straight to the specifications for &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number-constructor-number-value&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-parsefloat-string&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parseFloat&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-parseint-string-radix&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parseInt&lt;/code&gt;&lt;/a&gt;, we see that &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;parseFloat&lt;/code&gt; explicitly check for a &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StrDecimalLiteral&lt;/code&gt;&lt;/a&gt;—&lt;code class=&quot;highlighter-rouge&quot;&gt;Infinity&lt;/code&gt;—while &lt;code class=&quot;highlighter-rouge&quot;&gt;parseInt&lt;/code&gt; does not. This makes sense because IEEE 754 has representations for infinity, but infinity is not an integer.&lt;/p&gt;

&lt;p&gt;10:21: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md&quot;&gt;The trailing portion&lt;/a&gt; of a decimal value after the &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;, if &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, is optional. And it’s kinda pretty!&lt;/p&gt;

&lt;p&gt;10:54: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;Some developers use&lt;/a&gt; the double tilde &lt;code class=&quot;highlighter-rouge&quot;&gt;~~&lt;/code&gt; to truncate the decimal part of a &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;. This short section in YDKJS explains everything about &lt;code class=&quot;highlighter-rouge&quot;&gt;~~x&lt;/code&gt; and why its behaviour &lt;em&gt;differs&lt;/em&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.round(x)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.floor(x)&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;x | 0&lt;/code&gt;, so you can give that a quick read.&lt;/p&gt;

&lt;p&gt;11:13: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md&quot;&gt;Like most modern&lt;/a&gt; languages, including practically all scripting languages, the implementation of JavaScript’s numbers is based on the “IEEE 754” standard. All this behaviour is specified in that standard.&lt;/p&gt;

&lt;p&gt;12:18: Brian explains this.&lt;/p&gt;

&lt;p&gt;12:50: The actual error is &lt;code class=&quot;highlighter-rouge&quot;&gt;Uncaught TypeError: Right-hand side of 'instanceof' is not callable&lt;/code&gt;, which makes sense.&lt;/p&gt;

&lt;p&gt;13:03: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt; literally stands&lt;/a&gt; for “not a &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;”, though this label/description is very poor and misleading, as we’ll see shortly. It would be much more accurate to think of &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt; as being “invalid number,” “failed number,” or even “bad number,” than to think of it as “not a number.” But &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt; is a primitive &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;, so again, it’s not an instance of any object.&lt;/p&gt;

&lt;p&gt;13:20: Brian explains this, but it’s worth noting that &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md&quot;&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;isNaN(..)&lt;/code&gt; utility&lt;/a&gt; has a fatal flaw, so read that to find out why.&lt;/p&gt;

&lt;p&gt;13:43: It’s kinda fun. This is just handy.&lt;/p&gt;

&lt;p&gt;14:00: Brian explains this rather well, But remember Rule 2!&lt;/p&gt;

&lt;p&gt;14:55: Rule 3 gives us the result we expect.&lt;/p&gt;

&lt;p&gt;15:08: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/up%20%26%20going/ch2.md&quot;&gt;This is a&lt;/a&gt; long-standing bug in JS, but one that is likely never going to be fixed. This is also the only real WTF in the entire talk.&lt;/p&gt;

&lt;p&gt;15:22: Brian explains this rather quickly. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;constructor&quot;&lt;/code&gt; is a string. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;constructor&quot;.constructor&lt;/code&gt; is the function that gets called when you run &lt;code class=&quot;highlighter-rouge&quot;&gt;new String()&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;constructor&quot;.constructor.constructor&lt;/code&gt; is the constructor of that function, which is the function that gets called when you run &lt;code class=&quot;highlighter-rouge&quot;&gt;new Function()&lt;/code&gt;. And &lt;code class=&quot;highlighter-rouge&quot;&gt;new Function(..)()&lt;/code&gt; returns a new function and calls it.&lt;/p&gt;

&lt;p&gt;16:15: This is just a hack for people who forget to write &lt;code class=&quot;highlighter-rouge&quot;&gt;foo = new Foo()&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo = Foo()&lt;/code&gt;. If you use the new ES6 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; syntax, you’ll get an &lt;code class=&quot;highlighter-rouge&quot;&gt;Uncaught TypeError: Class constructor Foo cannot be invoked without 'new'&lt;/code&gt;, so you’ll never forget it.&lt;/p&gt;

&lt;p&gt;17:12: Conclusion.&lt;/p&gt;

&lt;h3 id=&quot;javascript-sucks-and-it-doesnt-matter&quot;&gt;Javascript sucks and it doesn’t matter&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/PV_cFx29Xz0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Rob Ashton gave this talk a month before Brian Leroux, which is primarily about “it doesn’t matter” rather than “JavaScript sucks”. But the first few minutes does have a few WTFs, and it’s the third most-viewed WTFJS video on YouTube, so it’s worth a look.&lt;/p&gt;

&lt;p&gt;0:00: Introduction.&lt;/p&gt;

&lt;p&gt;1:38: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;What do we&lt;/a&gt; know about the &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; unary operator? It explicitly coerces to a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ToBoolean&lt;/code&gt; rules (and it also flips the parity). So before &lt;code class=&quot;highlighter-rouge&quot;&gt;[0] == ![0]&lt;/code&gt; is even processed, it’s actually already translated to &lt;code class=&quot;highlighter-rouge&quot;&gt;[0] == false&lt;/code&gt; […] the right-hand side &lt;code class=&quot;highlighter-rouge&quot;&gt;[0]&lt;/code&gt; will go through a &lt;code class=&quot;highlighter-rouge&quot;&gt;ToPrimitive&lt;/code&gt; coercion […] which then is &lt;code class=&quot;highlighter-rouge&quot;&gt;ToNumber&lt;/code&gt; coerced to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; for the right-hand side value, which is falsy.&lt;/p&gt;

&lt;p&gt;2:14: This WTF wasn’t covered in YDKJS, so we jump to the specs for &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-array.prototype.tostring&quot;&gt;Array.prototype.toString()&lt;/a&gt;, which calls &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-array.prototype.join&quot;&gt;Array.prototype.join()&lt;/a&gt;, which in step 7c says: “If element is &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, let &lt;em&gt;next&lt;/em&gt; be the empty String; otherwise, let &lt;em&gt;next&lt;/em&gt; be ? ToString(&lt;em&gt;element&lt;/em&gt;).” &lt;code class=&quot;highlighter-rouge&quot;&gt;[].toString()&lt;/code&gt; comes from step 5 and 8: “Let &lt;em&gt;R&lt;/em&gt; be the empty String. Return &lt;em&gt;R&lt;/em&gt;.” That makes sense, but the special check for &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;… WTF?!&lt;/p&gt;

&lt;p&gt;2:54: Brian Leroux explains this at 12:19 of his talk.&lt;/p&gt;

&lt;p&gt;3:16: &lt;a href=&quot;https://github.com/aemkei/jsfuck&quot;&gt;WTF, JSFuck!?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3:40: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/tree/master/scope%20%26%20closures&quot;&gt;Scopes.&lt;/a&gt; &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes&quot;&gt;This.&lt;/a&gt; &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/es6%20%26%20beyond/ch3.md&quot;&gt;Classes.&lt;/a&gt; &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/search?q=sugar&amp;amp;unscoped_q=sugar&quot;&gt;Sugar.&lt;/a&gt; &lt;a href=&quot;https://github.com/sorrycc/awesome-javascript&quot;&gt;Tools.&lt;/a&gt; As Rob elaborates in the rest of his talk, JavaScript had them all, even back in 2012!&lt;/p&gt;

&lt;h3 id=&quot;wat&quot;&gt;WAT&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/BrB0oaSz8Nk&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Gary Bernhardt gave this talk ten months before the previous, so maybe this is really the original WTFJS talk, before all the obscenity crept in.&lt;/p&gt;

&lt;p&gt;0:00: Ruby.&lt;/p&gt;

&lt;p&gt;1:21: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;If either operand&lt;/a&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; (or becomes one with the above steps!), the operation will be &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; concatenation.&lt;/p&gt;

&lt;p&gt;1:51: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch5.md&quot;&gt;Another commonly cited&lt;/a&gt; JS gotcha is this exact example.&lt;/p&gt;

&lt;p&gt;2:26: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch5.md&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; is interpreted&lt;/a&gt; as a standalone &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; empty block (which does nothing). Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;+ {}&lt;/code&gt; is an expression that &lt;em&gt;explicitly coerces&lt;/em&gt; (see Chapter 4) the &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;3:03: “This is actually the only line in this entire presentation that’s reasonable.”&lt;/p&gt;

&lt;p&gt;3:33: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; operator&lt;/a&gt; is defined only for numeric subtraction, so &lt;code class=&quot;highlighter-rouge&quot;&gt;a - 0&lt;/code&gt; forces &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;’s value to be coerced to a &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;3:54: Conclusion.&lt;/p&gt;

&lt;h3 id=&quot;wtfjscom&quot;&gt;wtfjs.com&lt;/h3&gt;

&lt;p&gt;Because this post is apparently in reverse chronological order now, turns out that the original original WTFJS was Brian Leroux’s &lt;a href=&quot;https://wtfjs.com/&quot;&gt;wtfjs.com&lt;/a&gt;. In fact, we’ve seen most of the WTFs already in the three videos above, respectively titled “Brian”, “Rob”, and “Gary”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-almost-but-not-quite&quot;&gt;almost but not quite&lt;/a&gt;: Brian, 6:40.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-foonanny&quot;&gt;foonanny&lt;/a&gt;: Brian, 5:31.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-min-number-treachery&quot;&gt;min number treachery&lt;/a&gt;, Brian, 12:07.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-maths-fun&quot;&gt;maths fun&lt;/a&gt;: Brian, 13:03, 11:14, 7:06.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-not-a-number-is-a-number&quot;&gt;not a number is a number&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-maths-fun&quot;&gt;maths fun&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-not-a-number-is-not-a-not-a-number&quot;&gt;not a number is not not a number&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt; isn’t equal&lt;/a&gt; to itself. &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt; is the &lt;em&gt;only&lt;/em&gt; value in the whole language where that’s true.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-null-is-not-an-object&quot;&gt;null is not an object&lt;/a&gt;: Brian, 15:08.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-parseint-treachery&quot;&gt;parseint treachery&lt;/a&gt;: Brian, 9:27.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-13-null-is-not-falsy&quot;&gt;null is not falsy&lt;/a&gt;: Brian, 1:50.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-13-string-is-not-string&quot;&gt;string is not string&lt;/a&gt;: Brian, 4:00.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-15-careful&quot;&gt;careful&lt;/a&gt;: Rob, 1:38.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-15-hoisting&quot;&gt;hoisting&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch4.md&quot;&gt;Only the declarations&lt;/a&gt; themselves are hoisted, while any assignments or other executable logic are left &lt;em&gt;in place&lt;/em&gt;. If hoisting were to re-arrange the executable logic of our code, that could wreak havoc.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-15-scope-fun&quot;&gt;scope fun&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md&quot;&gt;The top-end of&lt;/a&gt; every normal &lt;code class=&quot;highlighter-rouge&quot;&gt;[[Prototype]]&lt;/code&gt; chain is the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.prototype&lt;/code&gt;. So &lt;code class=&quot;highlighter-rouge&quot;&gt;window.foo === 10&lt;/code&gt; in the browser or &lt;code class=&quot;highlighter-rouge&quot;&gt;global.foo === 10&lt;/code&gt; in Node, then &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(foo)&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(window.foo)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(global.foo)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-15-thc-timetravel&quot;&gt;thc timetravel&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md&quot;&gt;According to the&lt;/a&gt; specification, if an operation like addition results in a value that’s too big to represent, the IEEE 754 “round-to-nearest” mode specifies what the result should be.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-15-true-has-a-value&quot;&gt;true has a value&lt;/a&gt;: Brian, 2:40.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-15-undefined-is-mutable&quot;&gt;undefined is mutable&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md&quot;&gt;In non-&lt;code class=&quot;highlighter-rouge&quot;&gt;strict&lt;/code&gt; mode&lt;/a&gt;, it’s actually possible (though incredibly ill-advised!) to assign a value to the globally provided &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; identifier:&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-16-automagic-semicolons&quot;&gt;automagic semicolons&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch5.md&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; statement&lt;/a&gt; doesn’t carry across the newline, as automatic semicolon insertion assumes the &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; terminating the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; statement.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-19-concat-coerce&quot;&gt;concat coerce&lt;/a&gt;: Brian, 9:00.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-23-boolean-paradox&quot;&gt;boolean paradox&lt;/a&gt;: Brian, 2:52.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-23-coerced&quot;&gt;coerced&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-parseint-treachery&quot;&gt;parseint treachery&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-23-makes-perfect-sense&quot;&gt;makes perfect sense&lt;/a&gt;: Brian, 8:29.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-24-messing-with-number-prototype&quot;&gt;messing with number prototype&lt;/a&gt;: Brian, 7:46.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-26-implicit-tostring-fun&quot;&gt;implicit tostring fun&lt;/a&gt;: Brian, 4:20.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-04-12-call-in-ur-call&quot;&gt;call in ur call&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;let f = function (a) {return a}&lt;/code&gt;. Then this is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;Function.prototype.call.apply(f, [1,2])&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;f.call(1, 2)&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;f(2)&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-04-31-isNaN&quot;&gt;isNaN&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;null !== NaN&lt;/code&gt; makes sense. Brian, 13:20.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-06-02-instances-and-default-values&quot;&gt;instances and default values&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;It’s a very&lt;/a&gt; little known fact that &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt; behave identically&lt;/strong&gt; in the case where two &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;s are being compared! Two such values are only &lt;em&gt;equal&lt;/em&gt; if they are both references to &lt;em&gt;the exact same value&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-06-09-function-in-ur-string&quot;&gt;function in ur string&lt;/a&gt;: Brian, 15:22.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-07-15-typeof-number-is-not-number&quot;&gt;typeof number is not number&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-24-messing-with-number-prototype&quot;&gt;messing with number prototype&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-07-22-magic-increasing-number&quot;&gt;magic increasing number&lt;/a&gt;: Brian, 6:40.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-07-23-im-not-a-number-really&quot;&gt;im not a number really&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-maths-fun&quot;&gt;maths fun&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-11-10-false-advertising&quot;&gt;false advertising&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes/ch2.md&quot;&gt;Unless the function&lt;/a&gt; returns its own alternate &lt;strong&gt;object&lt;/strong&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;-invoked function call will automatically return the newly constructed object.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2010-11-15-i-am-myself-but-also-not-myself&quot;&gt;i am myself but also not myself&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-15-careful&quot;&gt;careful&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2011-02-11-all-your-commas-are-belong-to-Array&quot;&gt;all your commas are belong to Array&lt;/a&gt;: Rob, 2:14.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2011-05-12-parseInt-is-not-eval&quot;&gt;parseInt is not eval&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;Parsing a numeric&lt;/a&gt; value out of a string is &lt;em&gt;tolerant&lt;/em&gt; of non-numeric characters – it just stops parsing left-to-right when encountered.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2011-06-23-parseint-magic&quot;&gt;parseint magic&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2012-10-10-infinity-madness&quot;&gt;infinity madness&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2011-06-27-min-less-max&quot;&gt;min less max&lt;/a&gt;: Brian, 12:07.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2011-07-26-iteration-demoralization&quot;&gt;iteration demoralization&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes/ch3.md&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; operator&lt;/a&gt; has the appearance that it will check for the existence of a value inside a container, but it actually checks for the existence of a property name.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2012-04-18-changing-variables-changes-arguments&quot;&gt;changing variables changes arguments&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch5.md&quot;&gt;If you pass&lt;/a&gt; an argument, the &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; slot and the named parameter are linked to always have the same value. […] It’s almost certainly a bad idea to ever rely on any such linkage.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2012-05-07-Numbers-and-dots&quot;&gt;Numbers and dots&lt;/a&gt;: Brian, 10:21.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2012-10-10-infinity-madness&quot;&gt;infinity madness&lt;/a&gt;: Read the &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;Parsing Non-Strings&lt;/a&gt; section for an explanation.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2012-12-28-undefined-props-on-numbers&quot;&gt;undefined props on numbers&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch3.md&quot;&gt;Primitive values don’t&lt;/a&gt; have properties or methods, so to access &lt;code class=&quot;highlighter-rouge&quot;&gt;.width&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.height&lt;/code&gt; you need an object wrapper around the value.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-02-13-unicode-vars&quot;&gt;unicode vars&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/es6%20%26%20beyond/ch2.md&quot;&gt;Prior to ES6&lt;/a&gt;, JavaScript strings could specify Unicode characters using Unicode escaping. […] As of ES6, we now have a new form for Unicode escaping (in strings and regular expressions), called Unicode &lt;em&gt;code point escaping&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-02-21-why-am-i-a-number&quot;&gt;why am i a number&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;The unary &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/a&gt; explicitly coerces its operand to a &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; value.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-02-22-parseint-radix&quot;&gt;parseint radix&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2012-10-10-infinity-madness&quot;&gt;infinity madness&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-02-28-null,-undefined-and-test&quot;&gt;null, undefined and test&lt;/a&gt;: &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-regexp.prototype.test&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp.prototype.test()&lt;/code&gt; applies &lt;code class=&quot;highlighter-rouge&quot;&gt;ToString()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-03-06-false-isnt-false&quot;&gt;false isn’t false&lt;/a&gt;: Explained in the link.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-04-18-true-story-bro&quot;&gt;true story bro&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2013-03-06-false-isnt-false&quot;&gt;false isn’t false&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-04-28-isfinite-null-is-true&quot;&gt;isfinite null is true&lt;/a&gt;: &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-isfinite-number&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isFinite()&lt;/code&gt; applies &lt;code class=&quot;highlighter-rouge&quot;&gt;ToNumber()&lt;/code&gt;&lt;/a&gt;, but &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-number.isfinite&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Number.isFinite()&lt;/code&gt; fixes this WTF&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-06-20-negative-indexes&quot;&gt;negative indexes&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;indexOf()&lt;/code&gt; returning &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; is unfortunate, but Perl, Python, Ruby, etc. all support negative array indices.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-07-04-array-constructor&quot;&gt;array constructor&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch3.md&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;a.map(..)&lt;/code&gt; call&lt;/a&gt; fails because the slots don’t actually exist, so &lt;code class=&quot;highlighter-rouge&quot;&gt;map(..)&lt;/code&gt; has nothing to iterate over.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-07-18-array-ruse&quot;&gt;array ruse&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch3.md&quot;&gt;Trailing commas in&lt;/a&gt; lists (array values, property lists, etc.) are allowed (and thus dropped and ignored).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-08-07-Math.max()-behaviour&quot;&gt;Math.max() behaviour&lt;/a&gt;: &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-math.max&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Math.max()&lt;/code&gt; applies &lt;code class=&quot;highlighter-rouge&quot;&gt;ToNumber()&lt;/code&gt;&lt;/a&gt; on each of its arguments, and returns &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt; if any value is &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2013-09-30-Array-Constructor2-is-Very-Undefined&quot;&gt;Array Constructor2 is Very Undefined&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2013-07-04-array-constructor&quot;&gt;array constructor&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2014-01-11-multiplying-arrays-and-objects&quot;&gt;multiplying arrays and objects&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;While far less&lt;/a&gt; common, &lt;code class=&quot;highlighter-rouge&quot;&gt;a * 1&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;a / 1&lt;/code&gt; would force &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;’s value to be coerced to a &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;[4, 4]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2014-01-29-regular-expression-and-slash&quot;&gt;regular expression and slash&lt;/a&gt;: This is standard regex behaviour.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2014-02-04-Date.Date-vs-Year&quot;&gt;Date.Date vs Year&lt;/a&gt;: &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-month-number&quot;&gt;Months are identified&lt;/a&gt; by an integer in the range 0 to 11, inclusive. But &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-date-number&quot;&gt;a date number&lt;/a&gt; is identified by an integer in the range 1 through 31, inclusive. WTF?!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2014-02-22-wtf_document.all&quot;&gt;wtf_document.all&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;A “falsy object”&lt;/a&gt; is a value that looks and acts like a normal object (properties, etc.), but when you coerce it to a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;, it coerces to a &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; value. […] The most well-known case is &lt;code class=&quot;highlighter-rouge&quot;&gt;document.all&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2014-02-25-array-indexof&quot;&gt;array indexof&lt;/a&gt;: Same idea as &lt;a href=&quot;https://wtfjs.com/wtfs/2013-07-04-array-constructor&quot;&gt;array constructor&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2014-03-13-String-Integers-Comparison&quot;&gt;String Integers Comparison&lt;/a&gt;: &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md&quot;&gt;If both values&lt;/a&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;s for the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; comparison, simple lexicographic (natural alphabetic) comparison on the characters is performed.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2014-03-13-regex-test-true-false&quot;&gt;regex test true false&lt;/a&gt;: This is standard regex behaviour when you set the global flag &lt;code class=&quot;highlighter-rouge&quot;&gt;'g'&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2014-05-05-this-length&quot;&gt;this length&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is the global &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; object, so &lt;code class=&quot;highlighter-rouge&quot;&gt;this.length === 0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2014-10-07-true-equals-false&quot;&gt;true equals false&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2013-03-06-false-isnt-false&quot;&gt;false isn’t false&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2014-11-22-object-as-object-key&quot;&gt;object as object key&lt;/a&gt;: &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-property-accessors-runtime-semantics-evaluation&quot;&gt;Accessing a property&lt;/a&gt; calls &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-topropertykey&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ToPropertyKey()&lt;/code&gt;, which calls&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ToPrimitive()&lt;/code&gt;, resulting in &lt;code class=&quot;highlighter-rouge&quot;&gt;[object Object]&lt;/code&gt; for all empty objects.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2015-02-02-Boolean-constructor&quot;&gt;Boolean constructor&lt;/a&gt;: Objects are never falsy, except maybe &lt;a href=&quot;https://wtfjs.com/wtfs/2014-02-22-wtf_document.all&quot;&gt;document.all&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2015-02-05-good-old-octal-decimal-wtf&quot;&gt;good old octal decimal wtf&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2010-02-12-parseint-treachery&quot;&gt;parseint treachery&lt;/a&gt;, plus a WTF for the silent fail.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2015-03-23-adding-arrays&quot;&gt;adding arrays&lt;/a&gt;: Gary, 1:21.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2015-04-08-array-sort&quot;&gt;array sort&lt;/a&gt;: &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-array.prototype.sort&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.sort()&lt;/code&gt;applies &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;&lt;/a&gt; on each element.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2015-04-16-moving-numbers&quot;&gt;moving numbers&lt;/a&gt;: &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-left-shift-operator&quot;&gt;Let &lt;em&gt;shiftCount&lt;/em&gt; be&lt;/a&gt; the result of masking out all but the least significant 5 bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;rnum&lt;/code&gt;. For &lt;code class=&quot;highlighter-rouge&quot;&gt;rnum === 32&lt;/code&gt;, we get &lt;code class=&quot;highlighter-rouge&quot;&gt;shiftCount === 0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2015-04-23-screwy-negative-array-index&quot;&gt;screwy negative array index&lt;/a&gt;: Duplicate of &lt;a href=&quot;https://wtfjs.com/wtfs/2013-06-20-negative-indexes&quot;&gt;negative indexes&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wtfjs.com/wtfs/2016-03-10-Object-And-Array-Prototype-Length&quot;&gt;Object And Array Prototype Length&lt;/a&gt;: This doesn’t actually create a real array.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-the-javascript&quot;&gt;What the… JavaScript?&lt;/h3&gt;

&lt;p&gt;It’s 4:30 am, so let’s hastily conclude with &lt;a href=&quot;https://github.com/denysdovhan/wtfjs&quot;&gt;a link to a popular wtfjs repo&lt;/a&gt;, and the most popular WTFJS video on YouTube, by Kyle Simpson himself:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/2pL28CcEijU&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</description>
        <pubDate>Fri, 01 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://eyqs.ca/blogs/1806-wtfjs-idkjs/</link>
        <guid isPermaLink="true">https://eyqs.ca/blogs/1806-wtfjs-idkjs/</guid>
        
        
      </item>
    
      <item>
        <title>Late Buses, Late Planes; Late Cars, Late Trains; Late Rides, Late Pains</title>
        <description>&lt;p&gt;In grade four of elementary school, my parents put me in a special education program for special children, not because I was special, but because my brother finally started doing homework at home (instead of schoolwork at school) after going through the program, so they wanted me to suffer as well. As special children, we each had an &lt;a href=&quot;https://en.wikipedia.org/wiki/Individualized_Education_Program&quot;&gt;Individual Education Plan&lt;/a&gt; with individual education goals that we had to revise and track our progress through every term.&lt;/p&gt;

&lt;p&gt;From the first term in grade four to the last term in grade seven, I always had exactly the same primary goal, and for every term from the first of grade four to the last of grade seven, I made exactly zero progress on this goal. It’s haunted me how futile all my strategies have been despite &lt;del&gt;my best&lt;/del&gt; some efforts, throughout all of junior high, throughout all of IB, throughout first year and second year and third year and so finally, starting today, I give up on trying to stop procrastinating.&lt;/p&gt;

&lt;p&gt;The next goal in my Individual Education Plan is to stop missing the bus.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;late-buses&quot;&gt;Late Buses&lt;/h3&gt;

&lt;p&gt;Why today? My procrastinative tendencies have not decreased one whit since grade four, as any of the classmates I’ve worked with in any of my group projects will readily corroborate. However, my late-ride tendencies have become a major annoyance, especially since Ms. Patton isn’t there anymore to make me sing the A-B-C’s when I’m late for class.&lt;/p&gt;

&lt;p&gt;Just in the last two weeks, I’ve missed the bus to work by one red light &lt;em&gt;four&lt;/em&gt; times, despite knowing exactly when it comes (7:06), exactly when I leave (7:01), and exactly how long it takes me to run to the stop (6 minutes). If you plug those numbers into Wolfram Alpha, you’ll see that it doesn’t work out. On the flip side, I’ve caught the bus by one red light twice, which was every single time I left at 7:00. After I miss the bus, I usually take 15 minutes to walk back home, drenched in sweat, take 20 minutes to eat breakfast due to reading Reddit, take another 20 minutes eating spoonfuls of air due to reading Reddit, and take 15 minutes to walk back to the stop, just in time to miss the next bus by one red light. Then I wake my brother up to drive me to work.&lt;/p&gt;

&lt;p&gt;An irritating characteristic of buses is the exactness of their schedules in light of the inexactness of reality. If all times in the schedule were rounded to the nearest multiple of five (7:05), you bet I’d show up a few minutes early since the time is obviously approximate. But because the times are exact to 7:06, I always feel that as long as I can get to the stop by 7:06:59, then I’ll make the bus. Unfortunately, I never get to the bus stop before 7:06:59, and even when I do, the bus has already left. Perhaps this is why I’ve never missed the bus home, which leaves at 19:05.&lt;/p&gt;

&lt;p&gt;Now I can’t run for more than a kilometre, and I can’t bike, or at least I haven’t since elementary school. But a frustration common among all other forms of transportation is the anguish of knowing you’ll be late and being physically unable to do anything about it. If you’re on foot or bike, you can release your resentment against the road to propel yourself faster, so that when you finally get to class, out of breath, you can rest easy knowing that at least you gave your all, unless your class is IB English and Ms. Patton makes you sing the A-B-C’s, out of breath and tune. If you’re in a car, at least you can release some of that anger as road rage. But if you’re in a bus, there’s absolutely nothing you can do. Every red light, every jaywalker, every car turning right into the lane or waiting to turn left out of it or trying to parallel park, every student sprinting to the stop because they wanted to sleep in an extra five minutes in the morning and for whom the bus waits for no reason—the bus never waits for you!—all the pent-up frustration and fury that accumulates without pause for an entire hour of standing because you’re one person too late to get a seat, all that anger stays with you for the entire day, just because you wanted to sleep in an extra five minutes in the morning.&lt;/p&gt;

&lt;h3 id=&quot;late-planes&quot;&gt;Late Planes&lt;/h3&gt;

&lt;p&gt;Let’s talk for a minute about a method of transportation with which I’ve had more success. I’ve always arrived at the airport three hours early for international flights, and so I’ve only missed one flight in my entire life. But in 2015 May on a family trip to France, I almost missed another.&lt;/p&gt;

&lt;p&gt;We arrived three hours early at Charles de Gaulle Airport to find a massive crowd completely blocking the entrance. We moved to the next entrance, which was similarly blocked, as was the next, as was the next, until eventually we merged into the blockade ourselves. Turns out a suspicious suitcase was left unattended and the entire terminal was closed off while the French SWAT remotely detonated the contents, which were ultimately mundane. By the time they let us through, our flight had already started boarding, so my mom first convinced our fellow blockade comrades to let us skip the check-in line, then convinced the airport agents to let us skip the security check line, and finally sprinted to the departure gate just as a group of fairly Vancouver-looking folk started to leave. We ran with them out of the building and onto a waiting bus, which drove us directly to the plane, which was already on the taxi runway, and which took us the ten hours home.&lt;/p&gt;

&lt;p&gt;In retrospect, I guess we didn’t need to arrive early after all, since we spent all those hours just idling outside the airport. I’ll admit that the only reason I added this irrelevant story is because “planes” rhymes with “trains”.&lt;/p&gt;

&lt;h3 id=&quot;late-cars&quot;&gt;Late Cars&lt;/h3&gt;

&lt;p&gt;Back to the point. Whenever I missed the bus for an important event, I could crawl home and beg my dad to drive me there instead. In middle school, the only important events were weekly piano lessons, which I always dreaded because I’d never practice until the day of, then I’d practice too long and miss the bus, and then my dad would angrily lecture me during the entire ride about how I needed to improve my time management skills. All the goals in my Individual Education Plan were always about time management: procrastination, tardiness, prioritization, eating-lunch-and-dinner-for-over-an-hour-ness, I’ve made no progress on any of them in the last decade and I think my parents eventually realized that.&lt;/p&gt;

&lt;p&gt;Now they don’t want to spend the effort to yell at me anymore, or just don’t care at all, as if they somehow found out that I’d always end up sleeping in the library instead of going to my morning classes because nobody takes attendance and my grades are inversely proportional to how much time I spend in class (see: MATH 320, MECH 260, ENPH 259). I feel like my dad sometimes misses the good ol’ days, judging by how eagerly he insists on driving me anywhere whenever I mention “exam” and “late” in the same sentence. For example, he’s recently been offering me rides to the bus stop 0.5 km away. After factoring in the time it takes him to get dressed, get down to the garage, warm up the engine, back out into the alleyway, and drive the other way to avoid the garbage truck blocking the path, I ended up missing my usual bus.&lt;/p&gt;

&lt;h3 id=&quot;late-trains&quot;&gt;Late Trains&lt;/h3&gt;

&lt;p&gt;Last January, I moved out for the first time ever and spent four months alone in France. Those four months were the most distressing and depressing months of my life, so halfway through I decided to stop shutting myself in my room all weekend every weekend, and go explore the continent. Unfortunately, the common theme throughout all these stories is that I just can’t deal with time. I’d book everything last minute at ridiculous prices, then stay up for no reason, sprint to the light rail, curse my physical inability to do anything about the transit personnel who just had to spend five minutes checking tickets on that day, and finally miss the train.&lt;/p&gt;

&lt;p&gt;This happened at least three times, and probably thirty times if you count the light rail.&lt;/p&gt;

&lt;p&gt;I say at least because I don’t remember exactly, but the ticket receipts in my Gmail history reveal all. The first time was on April 9th, when I missed the 19:17 train from Brussels-South to Lille-Europe. It would have taken only 35 minutes with no transfers, but I got lost at the train station and got to the platform just as the train started to move. Several seconds later, a Chinese couple appeared in the same boat, and though I offered my (or tried to ask for their) help, they could only speak Cantonese and French, but I couldn’t understand it and we never saw each other ever again. We presumably ended up on the same train back, which left at 19:51, had a transfer at Ghent, and finally arrived at Lille after 119 minutes, for a hefty price of €24.60. I almost missed that train too, because I had a burger combo to pass the time without realizing that in Belgium, you have to pay for condiments, and you have to pay to use the washroom, which had a huge lineup! That’s my eating-lunch-and-dinner-for-over-an-hour-ness in action.&lt;/p&gt;

&lt;p&gt;The second time was on April 17th, the only long weekend I had in France, from The Hague to Rotterdam. I was supposed to leave at 13:37 and arrive at 14:09 with no transfers, but the light rail was late, I was physically unable to do anything about it, and I eventually had to buy a new ticket for €5.80, which left at 13:53 and arrived at 14:11. Those two minutes I lost were very important to me, because I only had three hours to spend in Rotterdam, and I experienced more architectural elegance during that time than in my entire life, before and after. Rotterdam is a beautiful city.&lt;/p&gt;

&lt;p&gt;The third time was supposed to be my last full day in France, April 29th. I had always started out in Lille-Europe to get to Brussels, London, etc. but I couldn’t just leave France without going to Vimy Ridge, so I got to Lille-Flanders at exactly 10:00 and hopped in a train. You might have gotten a bit worried when I said “a train”, and I was definitely worried a minute after the expected departure time when the train started to not depart at all. Turns out I was in the wrong train. This time, I didn’t care enough to buy a new ticket, so I idled for half an hour, got on the next train, and luckily, nobody bothered to check for tickets. Unluckily, someone stole my passport and laptop that night, and I ended up missing my flight home.&lt;/p&gt;

&lt;h3 id=&quot;late-rides&quot;&gt;Late Rides&lt;/h3&gt;

&lt;p&gt;So those are some of my many stories about late rides. Unlike these, Individual Education Plans always focus on actions for the future, not mistakes of the past. So what should I do?&lt;/p&gt;

&lt;p&gt;First off, I need to re-evaluate the money value of time. Two minutes spent waiting at the bus stop feels longer to me than twenty minutes spent walking to it. But logically, the two minutes I save every day by arriving at the stop with a standard deviation of one red light would take an entire month to justify the hour I lose from missing the bus, and experimentally, the period of my missing buses is half a week, not a month.&lt;/p&gt;

&lt;p&gt;Now that I’ve finally realized this, today, in the process of writing this post, arriving on time should be an easy exercise in elementary engineering. If you need to leave two minutes earlier, just set all the clocks in your environment two minutes ahead, which was exactly what I did in high school after Ms. Patton made me sing the A-B-C’s because I missed the bus. Alas, two minutes made hardly any difference, so I set all the clocks ahead by five minutes. Eventually, I started to instinctively subtract five minutes from every time I saw, which made me late to even more classes in school, because the clocks weren’t running fast and I didn’t have a phone nor a watch to set ahead. Ultimately, I set all the clocks ahead by seven minutes, and the end result is I’m now very good at subtracting seven modulo 60.&lt;/p&gt;

&lt;p&gt;No! This should be an easy exercise in elementary engineering. If you need to leave two minutes earlier, just pretend that the bus leaves two minutes early. My life of timeliness begins today!&lt;/p&gt;

&lt;h3 id=&quot;late-pains&quot;&gt;Late Pains&lt;/h3&gt;

&lt;p&gt;Sometimes, my tardiness affects more than just myself and my wallet, and it’s these times that have given me the greatest incentive to change. A few years ago, I got on the bus a bit late for an optometrist appointment and got unexpectedly (for me) bogged down in rush-hour traffic, again physically unable to do anything but grit my teeth. I got off near home and called hoping that my dad would drive me there, but my mom finally had enough of it and threatened to disown me if the optometrist didn’t reschedule the appointment for free. Thankfully, they did, but I’ll never forget the terrible shame I felt for the entire week. But two weeks later I was back to missing the bus as usual, and my mom soon forgot about it.&lt;/p&gt;

&lt;p&gt;Somewhat more recently, the first weekend I left my room in France was about two months in, when the new engineer, Tomáš from Czechia, invited me to visit the outdoor market. I was ten minutes late, as was usual for me, but it was absolutely not usual for him, and he delivered to me a compelling lecture on contemporary social etiquette. I don’t remember anything he said, but I do remember that same feeling of guilt I had for the whole day.&lt;/p&gt;

&lt;p&gt;Sure, I forgot all about it too the next day, but the point is, being late is painful. It’s painful for me when I sprint after a bus to no avail, it’s painful for the ticket salespeople when they try to understand the incomprehensible Canadian who missed his train, and it’s painful for everyone who’s had to wait for my arrival, which is unfortunately the majority of fortunately a very small number of people. In fact, the only times I can remember being sad are when I’m late, when others are late, and when I have to deal with the consequences of procrastination.&lt;/p&gt;

&lt;p&gt;I could have replaced the goals in my Individual Education Plan with just two words, “Be happy!”, and it would have meant the same thing.&lt;/p&gt;

</description>
        <pubDate>Tue, 01 May 2018 00:00:00 -0700</pubDate>
        <link>https://eyqs.ca/blogs/1805-late-rides/</link>
        <guid isPermaLink="true">https://eyqs.ca/blogs/1805-late-rides/</guid>
        
        
      </item>
    
      <item>
        <title>A Review of All UBC's Computer Engineering/Science Courses That Eugene Actually Took</title>
        <description>&lt;p&gt;Engineering undergrads at the University of British Columbia don’t get many electives. They only get to choose three of their &lt;a href=&quot;http://www.calendar.ubc.ca/vancouver/index.cfm?tree=12,195,272,30&quot;&gt;complementary studies courses&lt;/a&gt;, one for impact of technology on society and two for humanities and social sciences. Different engineering programs differ on their number of technical electives, from ten in computer engineering to only two in chemical/biological engineering and mechatronics.&lt;/p&gt;

&lt;p&gt;As an engineering physics student, I get five technical electives, but I’ve already used them all up. As I’ll never get to actually take any more computer engineering/science courses for the last three years of my degree, now’s the time to review all such courses I’ve actually taken. Also, I finally get to brag about my grades.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;apsc-160-introduction-to-computation-in-engineering-design&quot;&gt;APSC 160: Introduction to Computation in Engineering Design&lt;/h3&gt;
&lt;h4 id=&quot;hassan-khosravi-2016w1-98-highest-in-section&quot;&gt;Hassan Khosravi, 2016W1, 98% (highest in section)&lt;/h4&gt;

&lt;p&gt;“Analysis and simulation, laboratory data acquisition and processing, measurement interfaces, engineering tools, computer systems organization, programming languages.”&lt;/p&gt;

&lt;p&gt;APSC 160 is the mandatory programming intro for all first-year engineering students, and by far the most useless course I’ve ever taken. Analysis and simulation means tracing through five lines of if statements to find the value of a variable at the end. Laboratory data acquisition means plugging sketchy boards made by second-years ten years ago into the lab computers and calling &lt;code class=&quot;highlighter-rouge&quot;&gt;analogRead()&lt;/code&gt;. The measurement interface is a protractor, and the engineering tool is Microsoft Excel 2003. The hardest concepts were character strings and iterating through arrays.&lt;/p&gt;

&lt;p&gt;If you don’t have to take the course, don’t take it. If you have to take it and you’ve never coded before, take some time over the summer and learn to code something fun. If you have to take it and you’ve written any code in any language at any time in your life, then you have a pretty good shot at getting 100%, like Amar Shah did, especially because your worst lab is dropped. The only reason I got 98% was because I handed in the first midterm in exactly 30 minutes, because for some reason I thought that would help me get my TA position in first year, second term. Yes, I’m bragging about it because nothing better has happened in my life since I got this lucrative PeerWise badge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blogs/1804/peerwise.png&quot; alt=&quot;The &amp;quot;Einstein&amp;quot; badge is awarded for answering at least 20 questions &amp;quot;correctly&amp;quot; in a row on PeerWise. On 2015 September 22, I became the first person in the section to obtain said badge, and I never opened PeerWise after that because it's totally pointless.&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cpsc-320-intermediate-algorithm-design-and-analysis&quot;&gt;CPSC 320: Intermediate Algorithm Design and Analysis&lt;/h3&gt;
&lt;h4 id=&quot;geoffrey-tien-2016s2-95-highest-in-section&quot;&gt;Geoffrey Tien, 2016S2, 95% (highest in section)&lt;/h4&gt;

&lt;p&gt;“Systematic study of basic concepts and techniques in the design and analysis of algorithms, illustrated from various problem areas. Topics include: models of computation; choice of data structures; graph-theoretic, algebraic, and text processing algorithms.”&lt;/p&gt;

&lt;p&gt;CPSC 320 is the mandatory intermediate algorithm design and analysis course (yep) for CS students. You’ll be writing a lot of pseudocode and proofs, with no actual coding at all. Math students with no programming experience may fare better than CS students who forgot how to do proofs.&lt;/p&gt;

&lt;p&gt;Every job I applied to rejected me in the summer of first year, so to cut my losses, I crammed for the CPSC 110 challenge exam and appealed to take CPSC 320 on the basis of my high grades and the fact that there were 30 empty unrestricted seats because this was an extra section with zero demand. It was the last term that the CS department allowed any engineering student to waive any prerequisites, and now the &lt;a href=&quot;https://www.cs.ubc.ca/students/undergrad/courses-deadlines/rules-about-cpsc-appeals-undergraduate-students/&quot;&gt;appeals page&lt;/a&gt; has become hilariously passive-aggressive towards us.&lt;/p&gt;

&lt;p&gt;I got the highest grade in the section mainly because I zoned out in class. Two years ago, Geoff was objectively a bad lecturer. He would speed through statistical derivations and walls of pseudocode that nobody could follow, then stumble over much simpler proofs in the next slide. You’d come out of his lectures knowing less than you did going in. A combination of family issues, little preparation time, CPSC 320 being his second ever UBC course, and the fact that he had to rush to Coquitlam College to teach several other courses probably explains why he was so disorganized. The whole point of this story is that your experience with this course entirely depends not only on who’s teaching it, but even their current life circumstances.&lt;/p&gt;

&lt;p&gt;My biggest pet peeve was the line of a dozen keeners that would extend 5-minute breaks into 20 minutes because Geoff was too accommodating to tell them to go away. Another issue was the grading scheme, which put 30% on assignments. There were supposed to be four written assignments, but there ended up being only three for some reason, and they were group assignments for some reason, so the class average was like 90% for those. Of course, that led to the exams being ridiculously difficult. Our section average was 70%; the section average in 2016S1 was 76%.&lt;/p&gt;

&lt;p&gt;Was it worth it? Not really. I took it to help me find a job, but every job I applied to in co-op rejected me in the fall of second year. All the content came straight from the Kleinberg and Tardos textbook “Algorithm Design”, and since lectures had negative utility, the textbook is where I learned everything. If you have to take it, you have to take it; if you don’t, just read the textbook, unless your instructor is really great. Though recently, I’ve heard nothing but praise about Geoff.&lt;/p&gt;

&lt;h3 id=&quot;cpen-221-principles-of-software-construction&quot;&gt;CPEN 221: Principles of Software Construction&lt;/h3&gt;
&lt;h4 id=&quot;sathish-gopalakrishnan-2016w1-98-highest-in-section&quot;&gt;Sathish Gopalakrishnan, 2016W1, 98% (highest in section)&lt;/h4&gt;

&lt;p&gt;“Design, implementation, reasoning about software systems: abstraction and specification of software, testing, verification, abstract data types, object-oriented design, type hierarchies, concurrent software design.”&lt;/p&gt;

&lt;p&gt;CPEN 221 is the mandatory second-year programming course for computer engineering, engineering physics, and (soon) biomedical engineering students, about equivalent to CPSC 210, with dabs of CPSC 110 (recursive data types) and CPSC 213 (concurrency and parallelism).&lt;/p&gt;

&lt;p&gt;Whereas APSC 160 was too slow, CPEN 221 was way too fast. The entire course was about principles of software construction (yep) as opposed to programming in Java, so Sathish assumed everyone studied Java over the summer, which exactly zero people did, and leapt straight into inheritance and polymorphism in the first week! Once we finally kinda knew how to use Java, Git, Eclipse, and JUnit, the course suddenly pivoted into concurrency constructs like reader/writer locks and condition variables, so everyone was back to square one. Two weeks later, just as we started to understand what race conditions were, it was time to learn fork-join parallelism and map/filter/reduce. Oh, and a random lecture about networking. And another lecture about grammars, lexers, and parsers. And yep, all those topics were on the final exam.&lt;/p&gt;

&lt;p&gt;What the heck?&lt;/p&gt;

&lt;p&gt;We had to read 20 pages of notes every single week, and each project took so long that Sathish extended the deadline of the last project until Christmas. 20% of the grade was based on a programming proficiency test that you had to retake until you passed, and people were retaking that into late January. To top it all off, nobody had any idea what the lectures were for, although everyone agreed that Sathish was an awesome character, but this Matei Ripeanu guy kept on randomly interrupting for no reason.&lt;/p&gt;

&lt;p&gt;The course is a lot of work, especially if you want to get 98%, but you’ll learn so much along the way. The highest base mark is 92%, and anything above that comes from bonuses. So you bet I did all the bonus programming proficiency tests, answered all the bonus exam questions, and spent a week of my life on the bonus project instead of studying for MECH 260, where I got my worst mark ever. I was the only person who had anything sensible for a ridiculous non-polynomial programming test, the only person to correctly answer the bonus question on the final exam, and one of three people to complete and present the bonus project, but I still ended up with the same grade as Amar Shah, who didn’t even attempt the bonus project because he’s smart, which keeps me salty to this day.&lt;/p&gt;

&lt;p&gt;Ultimately, my advice is the same as that which you’ve heard hundreds of times and never actually followed. Study Java over the summer. Start the projects as soon as they come out. Do the readings as they come out, so you don’t have to cram before the exams. And don’t even try any of the bonus activities.&lt;/p&gt;

&lt;h3 id=&quot;cpen-331-operating-systems&quot;&gt;CPEN 331: Operating Systems&lt;/h3&gt;
&lt;h4 id=&quot;alexandra-fedorova-2017w1-90&quot;&gt;Alexandra Fedorova, 2017W1, 90%&lt;/h4&gt;

&lt;p&gt;“Operating systems, their design and their implementation. Process concurrency, synchronization, communication and scheduling. Device drivers, memory management, virtual memory, file systems, networking and security.”&lt;/p&gt;

&lt;p&gt;CPEN 331 is only mandatory for computer engineering students, but many others take it because we can’t take CPSC 313. Unlike advertised, it did &lt;em&gt;not&lt;/em&gt; cover anything about inter-process communication, scheduling, device drivers, file systems, networking, and security. Instead, it covers concurrency on the level of “use locks” (much more basic than CPEN 221), memory management on the level of “use &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt;”, and pretty much nobody did the virtual memory assignment.&lt;/p&gt;

&lt;p&gt;The material itself is challenging yet fascinating. The &lt;a href=&quot;http://pages.cs.wisc.edu/~remzi/OSTEP/&quot;&gt;OSTEP textbook&lt;/a&gt; may be the best textbook I’ve ever used. The assignments use the excellent &lt;a href=&quot;http://os161.eecs.harvard.edu/&quot;&gt;OS/161 instructional operating system&lt;/a&gt; from Harvard. Our prof, Sasha, has fond memories of many sleepless nights hacking away on the &lt;a href=&quot;http://www.eecs.harvard.edu/~cs161/&quot;&gt;very same assignments&lt;/a&gt; as an undergrad at Harvard taking CS 161! Unfortunately, UBC is not a world-class educational institution, so our assignments 2 and 3 is their assignment 1, our assignments 4 and 5 is their assignment 2, our assignment 6 (which pretty much nobody did) is their assignment 3, and we wouldn’t even have gotten to their assignment 4 with an extra month.&lt;/p&gt;

&lt;p&gt;Just as with CPSC 320, the silly grading scheme was a huge factor. 10% was based on “class participation”—we had to write down our name at the end of every class that we “participated” in. People were asking the most ridiculous questions just to get participation marks, so we didn’t have time to go through any of the exciting content on scheduling and file systems that Sasha had already prepared for us. Another 20% came from clicker questions, which I always missed because I’m a bad, lazy person who skips classes for no reason. There was an oral final exam worth 20%, but if any TA judged you worthy, you could skip the exam and automatically get 100% for it. My friend had exactly one interaction with some random TA in the entire term, but when he asked, that TA apparently judged him worthy to skip the exam. No wonder pretty much nobody did the last assignment, with so many free marks lying around.&lt;/p&gt;

&lt;p&gt;I shouldn’t have taken this course—everything is on &lt;a href=&quot;https://sites.google.com/site/cpen331/home/&quot;&gt;the course webpage&lt;/a&gt;. But if you have to take it and you want a high mark, focus on the participation marks, the clickers, and the easy assignments (everything except the last one). All the clicker questions are posted before lecture, so you have no excuse to not get 100% on them.&lt;/p&gt;

&lt;p&gt;P.S. The official solutions to the last assignment don’t even pass the tests, so don’t try too hard.&lt;/p&gt;

&lt;h3 id=&quot;cpen-312-digital-systems-and-microcomputers&quot;&gt;CPEN 312: Digital Systems and Microcomputers&lt;/h3&gt;
&lt;h4 id=&quot;jesus-calviño-fraga-2017w2-100-highest-in-section&quot;&gt;Jesus Calviño-Fraga, 2017W2, 100% (highest in section)&lt;/h4&gt;

&lt;p&gt;“Data representation in digital computers; boolean algebra; the design and optimization and implementation of combinatorial and sequential circuits; modern digital circuit technologies; memory and programmable logic devices; organization and operation of microcomputers; data/address bus organization; input-output interfacing.”&lt;/p&gt;

&lt;p&gt;CPEN 312 is a mandatory third-year course for engineering physics and mechatronics students, and a mandatory second-year course for integrated engineering students, about equivalent to CPSC 121 and CPEN 211, but without the grueling weekly 20-hour labs. Nobody else has any reason to take it. The grade distributions are forbiddenly bimodal, with peaks at 45% and 75%, for the same reasons as APSC 160: half the class (especially those not in mechatronics) have absolutely no interest in the course, and there’s some convoluted policy where if you fail (&amp;lt;40%) the final or the midterm or the labs, then you fail the course.&lt;/p&gt;

&lt;p&gt;The course is split into two sections, the first on sequential circuits and the second on assembly. Both sections are straightforward with enough practice, but the only resources given are Jesus’ lecture slides, which are complete but rather compact, so you’ll have to find practice problems somewhere else. I spent eight hours straight the night before the midterm watching almost all of &lt;a href=&quot;https://www.youtube.com/playlist?list=PLBlnK6fEyqRjMH3mWf6kwqiTbT798eAOm&quot;&gt;Neso Academy’s digital electronics videos&lt;/a&gt; at 3x speed. I highly recommend doing so, but maybe over a week instead, because Neso Academy transformed me from nervous wreck to being so confident that I handed in the midterm in exactly 40 minutes, and subsequently lost 6% due to missing the &lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt; to turn my &lt;code class=&quot;highlighter-rouge&quot;&gt;A XOR B&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;A XNOR B&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the second section, you can either take careful notes in class, or skip class and read off &lt;a href=&quot;http://irist.iust.ac.ir/files/ee/pages/az/mazidi.pdf&quot;&gt;Chung-Ping Young’s slide deck&lt;/a&gt;, which covers almost everything you need to know and much more you don’t need. Since the final is open-book, you don’t have to worry about memorizing anything, but if you aren’t prepared, you &lt;em&gt;will&lt;/em&gt; fail.&lt;/p&gt;

&lt;h3 id=&quot;cpen-432-real-time-system-design&quot;&gt;CPEN 432: Real-time System Design&lt;/h3&gt;
&lt;h4 id=&quot;bader-alahmad-2017w2-100-highest-in-section&quot;&gt;Bader Alahmad, 2017W2, 100% (highest in section)&lt;/h4&gt;

&lt;p&gt;“Multi-tasking; interrupt-driven systems; task scheduling; schedulability analysis; inter-process communication and synchronization; resource management; performance measurement; hardware/software integration; hardware/software tradeoffs; system reliability.”&lt;/p&gt;

&lt;p&gt;CPEN 432 is a senior elective course and there’s nothing else like it. But you have to know what you’re getting into. Most of the lecture content is about scheduling theory, verbatim from Buttazzo’s “Predictable Scheduling Algorithms and Applications”, so skim through chapters 1–4, and if you don’t like the material, don’t take the course. The final exam and all the written assignments are only about scheduling, and these require about as much rigour as CPSC 320, so brush up on your proofs and be ready to search up what Hoeffding’s inequality is.&lt;/p&gt;

&lt;p&gt;The projects are nominally about embedded systems, but you’ll have to learn everything on your own. They’re for groups of four hacking on one Raspberry Pi 2, and the first two are completely unrelated to the lecture material. I would highly recommend obtaining enough Raspberry Pi 2s for everyone, and somehow choosing a good team. I hit the jackpot and ended up mostly freeloading, with two graduating CS students, who were each taking three or four courses, and Amar Shah, who also got 100% and wrote &lt;a href=&quot;https://www.reddit.com/r/UBC/comments/82umhv/has_anyone_taken_cpen_432_realtime_system_design/dvd5i25/&quot;&gt;more stuff about the projects&lt;/a&gt;. It was absolutely unfair for the teams of mechanical engineering students taking seven courses with no OS experience.&lt;/p&gt;

&lt;p&gt;Bader was Sathish’s PhD student and my TA in CPEN 221, and this was his first time teaching a course. He had a tendency to flood us with bonus marks and easily yield to pressure, extending deadlines for every single assignment and project. The last project was about multiprocessor scheduling and extended to April 21st, but by that time we had so many bonus marks that nobody cared. Otherwise, Bader was a fantastic instructor and incredibly responsive to all my whiny questions on Piazza, and I’m sure he’ll set more reasonable workload and deadline expectations next year. Just know that this is a scheduling course, not a embedded systems course.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;tl;dr: ubcs cpen isnt great&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Apr 2018 00:00:00 -0700</pubDate>
        <link>https://eyqs.ca/blogs/1804-ubcs-cpen/</link>
        <guid isPermaLink="true">https://eyqs.ca/blogs/1804-ubcs-cpen/</guid>
        
        
      </item>
    
  </channel>
</rss>
